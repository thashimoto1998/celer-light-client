// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var entity_pb = require('./entity_pb.js');
var app_pb = require('./app_pb');
goog.object.extend(proto, entity_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.rpc.AuthAck', null, global);
goog.exportSymbol('proto.rpc.AuthReq', null, global);
goog.exportSymbol('proto.rpc.CelerChannelInHello', null, global);
goog.exportSymbol('proto.rpc.CelerMsg', null, global);
goog.exportSymbol('proto.rpc.CelerMsg.MessageCase', null, global);
goog.exportSymbol('proto.rpc.ChannelSummary', null, global);
goog.exportSymbol('proto.rpc.CondPayReceipt', null, global);
goog.exportSymbol('proto.rpc.CondPayRequest', null, global);
goog.exportSymbol('proto.rpc.CondPayResponse', null, global);
goog.exportSymbol('proto.rpc.CooperativeWithdrawRequest', null, global);
goog.exportSymbol('proto.rpc.CooperativeWithdrawResponse', null, global);
goog.exportSymbol('proto.rpc.DelegationDescription', null, global);
goog.exportSymbol('proto.rpc.DelegationProof', null, global);
goog.exportSymbol('proto.rpc.DelegationRequest', null, global);
goog.exportSymbol('proto.rpc.DelegationResponse', null, global);
goog.exportSymbol('proto.rpc.ErrCode', null, global);
goog.exportSymbol('proto.rpc.Error', null, global);
goog.exportSymbol('proto.rpc.HelloRequest', null, global);
goog.exportSymbol('proto.rpc.HelloResponse', null, global);
goog.exportSymbol('proto.rpc.JoinCelerStatus', null, global);
goog.exportSymbol('proto.rpc.MID', null, global);
goog.exportSymbol('proto.rpc.OpenChannelBy', null, global);
goog.exportSymbol('proto.rpc.OpenChannelRequest', null, global);
goog.exportSymbol('proto.rpc.OpenChannelResponse', null, global);
goog.exportSymbol('proto.rpc.OpenChannelStatus', null, global);
goog.exportSymbol('proto.rpc.PaymentSettleProof', null, global);
goog.exportSymbol('proto.rpc.PaymentSettleReason', null, global);
goog.exportSymbol('proto.rpc.PaymentSettleRequest', null, global);
goog.exportSymbol('proto.rpc.PaymentSettleResponse', null, global);
goog.exportSymbol('proto.rpc.PeerAddress', null, global);
goog.exportSymbol('proto.rpc.PeerStatus', null, global);
goog.exportSymbol('proto.rpc.QueryDelegationRequest', null, global);
goog.exportSymbol('proto.rpc.QueryDelegationResponse', null, global);
goog.exportSymbol('proto.rpc.RevealSecret', null, global);
goog.exportSymbol('proto.rpc.RevealSecretAck', null, global);
goog.exportSymbol('proto.rpc.SettledPayment', null, global);
goog.exportSymbol('proto.rpc.SignedDuplexState', null, global);
goog.exportSymbol('proto.rpc.SignedSimplexState', null, global);
goog.exportSymbol('proto.rpc.StateProof'. null, global);
goog.exportSymbol('proto.rpc.StateProofResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.MID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.MID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.MID.displayName = 'proto.rpc.MID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.CelerMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.CelerMsg.oneofGroups_);
};
goog.inherits(proto.rpc.CelerMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.CelerMsg.displayName = 'proto.rpc.CelerMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.Error.displayName = 'proto.rpc.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.AuthReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.AuthReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.AuthReq.displayName = 'proto.rpc.AuthReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.AuthAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.AuthAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.AuthAck.displayName = 'proto.rpc.AuthAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.RevealSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.RevealSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.RevealSecret.displayName = 'proto.rpc.RevealSecret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.RevealSecretAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.RevealSecretAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.RevealSecretAck.displayName = 'proto.rpc.RevealSecretAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.CondPayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.CondPayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.CondPayRequest.displayName = 'proto.rpc.CondPayRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.CondPayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.CondPayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.CondPayResponse.displayName = 'proto.rpc.CondPayResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SettledPayment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.SettledPayment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.SettledPayment.displayName = 'proto.rpc.SettledPayment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.PaymentSettleProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.PaymentSettleProof.repeatedFields_, null);
};
goog.inherits(proto.rpc.PaymentSettleProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.PaymentSettleProof.displayName = 'proto.rpc.PaymentSettleProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.PaymentSettleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.PaymentSettleRequest.repeatedFields_, null);
};
goog.inherits(proto.rpc.PaymentSettleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.PaymentSettleRequest.displayName = 'proto.rpc.PaymentSettleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.PaymentSettleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.PaymentSettleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.PaymentSettleResponse.displayName = 'proto.rpc.PaymentSettleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OpenChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OpenChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.OpenChannelRequest.displayName = 'proto.rpc.OpenChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.OpenChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.OpenChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.OpenChannelResponse.displayName = 'proto.rpc.OpenChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.CooperativeWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.CooperativeWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.CooperativeWithdrawRequest.displayName = 'proto.rpc.CooperativeWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.CooperativeWithdrawResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.CooperativeWithdrawResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.CooperativeWithdrawResponse.displayName = 'proto.rpc.CooperativeWithdrawResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.CondPayReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.CondPayReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.CondPayReceipt.displayName = 'proto.rpc.CondPayReceipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SignedSimplexState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.SignedSimplexState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.SignedSimplexState.displayName = 'proto.rpc.SignedSimplexState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.SignedDuplexState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.SignedDuplexState.repeatedFields_, null);
};
goog.inherits(proto.rpc.SignedDuplexState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.SignedDuplexState.displayName = 'proto.rpc.SignedDuplexState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.PeerAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.PeerAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.PeerAddress.displayName = 'proto.rpc.PeerAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.PeerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.PeerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.PeerStatus.displayName = 'proto.rpc.PeerStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.ChannelSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.ChannelSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.ChannelSummary.displayName = 'proto.rpc.ChannelSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.HelloRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.HelloRequest.repeatedFields_, null);
};
goog.inherits(proto.rpc.HelloRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.HelloRequest.displayName = 'proto.rpc.HelloRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.CelerChannelInHello = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.CelerChannelInHello.repeatedFields_, null);
};
goog.inherits(proto.rpc.CelerChannelInHello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.CelerChannelInHello.displayName = 'proto.rpc.CelerChannelInHello';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.HelloResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.HelloResponse.repeatedFields_, null);
};
goog.inherits(proto.rpc.HelloResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.HelloResponse.displayName = 'proto.rpc.HelloResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.DelegationDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.DelegationDescription.repeatedFields_, null);
};
goog.inherits(proto.rpc.DelegationDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.DelegationDescription.displayName = 'proto.rpc.DelegationDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.DelegationProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.DelegationProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.DelegationProof.displayName = 'proto.rpc.DelegationProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.DelegationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.DelegationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.DelegationRequest.displayName = 'proto.rpc.DelegationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.DelegationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.DelegationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.DelegationResponse.displayName = 'proto.rpc.DelegationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.QueryDelegationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.QueryDelegationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.QueryDelegationRequest.displayName = 'proto.rpc.QueryDelegationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.QueryDelegationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.QueryDelegationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.QueryDelegationResponse.displayName = 'proto.rpc.QueryDelegationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.StateProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.StateProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.StateProof.displayName = 'proto.rpc.StateProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.StateProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.StateProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.StateProofResponse.displayName = 'proto.rpc.StateProoofResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.MID.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.MID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.MID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.MID.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.MID}
 */
proto.rpc.MID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.MID;
  return proto.rpc.MID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.MID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.MID}
 */
proto.rpc.MID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.MID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.MID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.MID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.MID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.rpc.MID.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.MID} returns this
 */
proto.rpc.MID.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 seq = 2;
 * @return {number}
 */
proto.rpc.MID.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.MID} returns this
 */
proto.rpc.MID.prototype.setSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.CelerMsg.oneofGroups_ = [[6,7,8,9,10,11,12,13,14,15,31,32,33,34,35,36,37]];

/**
 * @enum {number}
 */
proto.rpc.CelerMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ERROR: 6,
  AUTH_REQ: 7,
  AUTH_ACK: 8,
  COND_PAY_REQUEST: 9,
  COND_PAY_RESPONSE: 10,
  PAYMENT_SETTLE_PROOF: 11,
  PAYMENT_SETTLE_REQUEST: 12,
  PAYMENT_SETTLE_RESPONSE: 13,
  WITHDRAW_REQUEST: 14,
  WITHDRAW_RESPONSE: 15,
  COND_PAY_RECEIPT: 31,
  REVEAL_SECRET: 32,
  REVEAL_SECRET_ACK: 33,
  PAY_RESULT_VOUCH_REQUEST: 34,
  PAY_RESULT_VOUCH_RESPONSE: 35,
  STATE_PROOF: 36,
  STATE_PROOF_RESPONSE: 37
};

/**
 * @return {proto.rpc.CelerMsg.MessageCase}
 */
proto.rpc.CelerMsg.prototype.getMessageCase = function() {
  return /** @type {proto.rpc.CelerMsg.MessageCase} */(jspb.Message.computeOneofCase(this, proto.rpc.CelerMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.CelerMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.CelerMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.CelerMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CelerMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    mid: (f = msg.getMid()) && proto.rpc.MID.toObject(includeInstance, f),
    retMid: (f = msg.getRetMid()) && proto.rpc.MID.toObject(includeInstance, f),
    flag: jspb.Message.getFieldWithDefault(msg, 3, 0),
    toAddr: msg.getToAddr_asB64(),
    error: (f = msg.getError()) && proto.rpc.Error.toObject(includeInstance, f),
    authReq: (f = msg.getAuthReq()) && proto.rpc.AuthReq.toObject(includeInstance, f),
    authAck: (f = msg.getAuthAck()) && proto.rpc.AuthAck.toObject(includeInstance, f),
    condPayRequest: (f = msg.getCondPayRequest()) && proto.rpc.CondPayRequest.toObject(includeInstance, f),
    condPayResponse: (f = msg.getCondPayResponse()) && proto.rpc.CondPayResponse.toObject(includeInstance, f),
    paymentSettleProof: (f = msg.getPaymentSettleProof()) && proto.rpc.PaymentSettleProof.toObject(includeInstance, f),
    paymentSettleRequest: (f = msg.getPaymentSettleRequest()) && proto.rpc.PaymentSettleRequest.toObject(includeInstance, f),
    paymentSettleResponse: (f = msg.getPaymentSettleResponse()) && proto.rpc.PaymentSettleResponse.toObject(includeInstance, f),
    withdrawRequest: (f = msg.getWithdrawRequest()) && proto.rpc.CooperativeWithdrawRequest.toObject(includeInstance, f),
    withdrawResponse: (f = msg.getWithdrawResponse()) && proto.rpc.CooperativeWithdrawResponse.toObject(includeInstance, f),
    condPayReceipt: (f = msg.getCondPayReceipt()) && proto.rpc.CondPayReceipt.toObject(includeInstance, f),
    revealSecret: (f = msg.getRevealSecret()) && proto.rpc.RevealSecret.toObject(includeInstance, f),
    revealSecretAck: (f = msg.getRevealSecretAck()) && proto.rpc.RevealSecretAck.toObject(includeInstance, f),
    payResultVouchRequest: (f = msg.getPayResultVouchRequest()) && entity_pb.VouchedCondPayResult.toObject(includeInstance, f),
    payResultVouchResponse: (f = msg.getPayResultVouchResponse()) && entity_pb.VouchedCondPayResult.toObject(includeInstance, f),
    stateProof: (f = msg.getStateProof()) && proto.rpc.StateProof.toObject(includeInstance, f),
    stateProofResponse: (f = msg.getStateProofResponse()) && proto.rpc.StateProofResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.CelerMsg}
 */
proto.rpc.CelerMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.CelerMsg;
  return proto.rpc.CelerMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.CelerMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.CelerMsg}
 */
proto.rpc.CelerMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.MID;
      reader.readMessage(value,proto.rpc.MID.deserializeBinaryFromReader);
      msg.setMid(value);
      break;
    case 2:
      var value = new proto.rpc.MID;
      reader.readMessage(value,proto.rpc.MID.deserializeBinaryFromReader);
      msg.setRetMid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFlag(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToAddr(value);
      break;
    case 6:
      var value = new proto.rpc.Error;
      reader.readMessage(value,proto.rpc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 7:
      var value = new proto.rpc.AuthReq;
      reader.readMessage(value,proto.rpc.AuthReq.deserializeBinaryFromReader);
      msg.setAuthReq(value);
      break;
    case 8:
      var value = new proto.rpc.AuthAck;
      reader.readMessage(value,proto.rpc.AuthAck.deserializeBinaryFromReader);
      msg.setAuthAck(value);
      break;
    case 9:
      var value = new proto.rpc.CondPayRequest;
      reader.readMessage(value,proto.rpc.CondPayRequest.deserializeBinaryFromReader);
      msg.setCondPayRequest(value);
      break;
    case 10:
      var value = new proto.rpc.CondPayResponse;
      reader.readMessage(value,proto.rpc.CondPayResponse.deserializeBinaryFromReader);
      msg.setCondPayResponse(value);
      break;
    case 11:
      var value = new proto.rpc.PaymentSettleProof;
      reader.readMessage(value,proto.rpc.PaymentSettleProof.deserializeBinaryFromReader);
      msg.setPaymentSettleProof(value);
      break;
    case 12:
      var value = new proto.rpc.PaymentSettleRequest;
      reader.readMessage(value,proto.rpc.PaymentSettleRequest.deserializeBinaryFromReader);
      msg.setPaymentSettleRequest(value);
      break;
    case 13:
      var value = new proto.rpc.PaymentSettleResponse;
      reader.readMessage(value,proto.rpc.PaymentSettleResponse.deserializeBinaryFromReader);
      msg.setPaymentSettleResponse(value);
      break;
    case 14:
      var value = new proto.rpc.CooperativeWithdrawRequest;
      reader.readMessage(value,proto.rpc.CooperativeWithdrawRequest.deserializeBinaryFromReader);
      msg.setWithdrawRequest(value);
      break;
    case 15:
      var value = new proto.rpc.CooperativeWithdrawResponse;
      reader.readMessage(value,proto.rpc.CooperativeWithdrawResponse.deserializeBinaryFromReader);
      msg.setWithdrawResponse(value);
      break;
    case 31:
      var value = new proto.rpc.CondPayReceipt;
      reader.readMessage(value,proto.rpc.CondPayReceipt.deserializeBinaryFromReader);
      msg.setCondPayReceipt(value);
      break;
    case 32:
      var value = new proto.rpc.RevealSecret;
      reader.readMessage(value,proto.rpc.RevealSecret.deserializeBinaryFromReader);
      msg.setRevealSecret(value);
      break;
    case 33:
      var value = new proto.rpc.RevealSecretAck;
      reader.readMessage(value,proto.rpc.RevealSecretAck.deserializeBinaryFromReader);
      msg.setRevealSecretAck(value);
      break;
    case 34:
      var value = new entity_pb.VouchedCondPayResult;
      reader.readMessage(value,entity_pb.VouchedCondPayResult.deserializeBinaryFromReader);
      msg.setPayResultVouchRequest(value);
      break;
    case 35:
      var value = new entity_pb.VouchedCondPayResult;
      reader.readMessage(value,entity_pb.VouchedCondPayResult.deserializeBinaryFromReader);
      msg.setPayResultVouchResponse(value);
      break;
    case 36:
      var value = new proto.rpc.StateProof;
      reader.readMessage(value,proto.rpc.StateProof.deserializeBinaryFromReader);
      msg.setStateProof(value);
      break;
    case 37:
      var value = new proto.rpc.StateProofResponse;
      reader.readMessage(value,proto.StateProofResponse.deserializeBinaryFromReader);
      msg.setStateProofResponse(value);
      break;      
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.CelerMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.CelerMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.CelerMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CelerMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.MID.serializeBinaryToWriter
    );
  }
  f = message.getRetMid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.MID.serializeBinaryToWriter
    );
  }
  f = message.getFlag();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getToAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rpc.Error.serializeBinaryToWriter
    );
  }
  f = message.getAuthReq();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rpc.AuthReq.serializeBinaryToWriter
    );
  }
  f = message.getAuthAck();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rpc.AuthAck.serializeBinaryToWriter
    );
  }
  f = message.getCondPayRequest();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rpc.CondPayRequest.serializeBinaryToWriter
    );
  }
  f = message.getCondPayResponse();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rpc.CondPayResponse.serializeBinaryToWriter
    );
  }
  f = message.getPaymentSettleProof();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rpc.PaymentSettleProof.serializeBinaryToWriter
    );
  }
  f = message.getPaymentSettleRequest();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.rpc.PaymentSettleRequest.serializeBinaryToWriter
    );
  }
  f = message.getPaymentSettleResponse();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.rpc.PaymentSettleResponse.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawRequest();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.rpc.CooperativeWithdrawRequest.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawResponse();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.rpc.CooperativeWithdrawResponse.serializeBinaryToWriter
    );
  }
  f = message.getCondPayReceipt();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.rpc.CondPayReceipt.serializeBinaryToWriter
    );
  }
  f = message.getRevealSecret();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.rpc.RevealSecret.serializeBinaryToWriter
    );
  }
  f = message.getRevealSecretAck();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.rpc.RevealSecretAck.serializeBinaryToWriter
    );
  }
  f = message.getPayResultVouchRequest();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      entity_pb.VouchedCondPayResult.serializeBinaryToWriter
    );
  }
  f = message.getPayResultVouchResponse();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      entity_pb.VouchedCondPayResult.serializeBinaryToWriter
    );
  }
  f = message.getStateProof();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.rpc.StateProof.serializeBinaryToWriter
    );
  }
  f= message.getStateProofResponse();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.rpc.StateProofResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional MID mid = 1;
 * @return {?proto.rpc.MID}
 */
proto.rpc.CelerMsg.prototype.getMid = function() {
  return /** @type{?proto.rpc.MID} */ (
    jspb.Message.getWrapperField(this, proto.rpc.MID, 1));
};


/**
 * @param {?proto.rpc.MID|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setMid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearMid = function() {
  return this.setMid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MID ret_mid = 2;
 * @return {?proto.rpc.MID}
 */
proto.rpc.CelerMsg.prototype.getRetMid = function() {
  return /** @type{?proto.rpc.MID} */ (
    jspb.Message.getWrapperField(this, proto.rpc.MID, 2));
};


/**
 * @param {?proto.rpc.MID|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setRetMid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearRetMid = function() {
  return this.setRetMid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasRetMid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 flag = 3;
 * @return {number}
 */
proto.rpc.CelerMsg.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.setFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes to_addr = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CelerMsg.prototype.getToAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes to_addr = 4;
 * This is a type-conversion wrapper around `getToAddr()`
 * @return {string}
 */
proto.rpc.CelerMsg.prototype.getToAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToAddr()));
};


/**
 * optional bytes to_addr = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToAddr()`
 * @return {!Uint8Array}
 */
proto.rpc.CelerMsg.prototype.getToAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToAddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.setToAddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional Error error = 6;
 * @return {?proto.rpc.Error}
 */
proto.rpc.CelerMsg.prototype.getError = function() {
  return /** @type{?proto.rpc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rpc.Error, 6));
};


/**
 * @param {?proto.rpc.Error|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional AuthReq auth_req = 7;
 * @return {?proto.rpc.AuthReq}
 */
proto.rpc.CelerMsg.prototype.getAuthReq = function() {
  return /** @type{?proto.rpc.AuthReq} */ (
    jspb.Message.getWrapperField(this, proto.rpc.AuthReq, 7));
};


/**
 * @param {?proto.rpc.AuthReq|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setAuthReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearAuthReq = function() {
  return this.setAuthReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasAuthReq = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AuthAck auth_ack = 8;
 * @return {?proto.rpc.AuthAck}
 */
proto.rpc.CelerMsg.prototype.getAuthAck = function() {
  return /** @type{?proto.rpc.AuthAck} */ (
    jspb.Message.getWrapperField(this, proto.rpc.AuthAck, 8));
};


/**
 * @param {?proto.rpc.AuthAck|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setAuthAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearAuthAck = function() {
  return this.setAuthAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasAuthAck = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CondPayRequest cond_pay_request = 9;
 * @return {?proto.rpc.CondPayRequest}
 */
proto.rpc.CelerMsg.prototype.getCondPayRequest = function() {
  return /** @type{?proto.rpc.CondPayRequest} */ (
    jspb.Message.getWrapperField(this, proto.rpc.CondPayRequest, 9));
};


/**
 * @param {?proto.rpc.CondPayRequest|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setCondPayRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearCondPayRequest = function() {
  return this.setCondPayRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasCondPayRequest = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CondPayResponse cond_pay_response = 10;
 * @return {?proto.rpc.CondPayResponse}
 */
proto.rpc.CelerMsg.prototype.getCondPayResponse = function() {
  return /** @type{?proto.rpc.CondPayResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.CondPayResponse, 10));
};


/**
 * @param {?proto.rpc.CondPayResponse|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setCondPayResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearCondPayResponse = function() {
  return this.setCondPayResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasCondPayResponse = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PaymentSettleProof payment_settle_proof = 11;
 * @return {?proto.rpc.PaymentSettleProof}
 */
proto.rpc.CelerMsg.prototype.getPaymentSettleProof = function() {
  return /** @type{?proto.rpc.PaymentSettleProof} */ (
    jspb.Message.getWrapperField(this, proto.rpc.PaymentSettleProof, 11));
};


/**
 * @param {?proto.rpc.PaymentSettleProof|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setPaymentSettleProof = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearPaymentSettleProof = function() {
  return this.setPaymentSettleProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasPaymentSettleProof = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PaymentSettleRequest payment_settle_request = 12;
 * @return {?proto.rpc.PaymentSettleRequest}
 */
proto.rpc.CelerMsg.prototype.getPaymentSettleRequest = function() {
  return /** @type{?proto.rpc.PaymentSettleRequest} */ (
    jspb.Message.getWrapperField(this, proto.rpc.PaymentSettleRequest, 12));
};


/**
 * @param {?proto.rpc.PaymentSettleRequest|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setPaymentSettleRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearPaymentSettleRequest = function() {
  return this.setPaymentSettleRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasPaymentSettleRequest = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional PaymentSettleResponse payment_settle_response = 13;
 * @return {?proto.rpc.PaymentSettleResponse}
 */
proto.rpc.CelerMsg.prototype.getPaymentSettleResponse = function() {
  return /** @type{?proto.rpc.PaymentSettleResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.PaymentSettleResponse, 13));
};


/**
 * @param {?proto.rpc.PaymentSettleResponse|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setPaymentSettleResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearPaymentSettleResponse = function() {
  return this.setPaymentSettleResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasPaymentSettleResponse = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CooperativeWithdrawRequest withdraw_request = 14;
 * @return {?proto.rpc.CooperativeWithdrawRequest}
 */
proto.rpc.CelerMsg.prototype.getWithdrawRequest = function() {
  return /** @type{?proto.rpc.CooperativeWithdrawRequest} */ (
    jspb.Message.getWrapperField(this, proto.rpc.CooperativeWithdrawRequest, 14));
};


/**
 * @param {?proto.rpc.CooperativeWithdrawRequest|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setWithdrawRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearWithdrawRequest = function() {
  return this.setWithdrawRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasWithdrawRequest = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional CooperativeWithdrawResponse withdraw_response = 15;
 * @return {?proto.rpc.CooperativeWithdrawResponse}
 */
proto.rpc.CelerMsg.prototype.getWithdrawResponse = function() {
  return /** @type{?proto.rpc.CooperativeWithdrawResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.CooperativeWithdrawResponse, 15));
};


/**
 * @param {?proto.rpc.CooperativeWithdrawResponse|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setWithdrawResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearWithdrawResponse = function() {
  return this.setWithdrawResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasWithdrawResponse = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional CondPayReceipt cond_pay_receipt = 31;
 * @return {?proto.rpc.CondPayReceipt}
 */
proto.rpc.CelerMsg.prototype.getCondPayReceipt = function() {
  return /** @type{?proto.rpc.CondPayReceipt} */ (
    jspb.Message.getWrapperField(this, proto.rpc.CondPayReceipt, 31));
};


/**
 * @param {?proto.rpc.CondPayReceipt|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setCondPayReceipt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearCondPayReceipt = function() {
  return this.setCondPayReceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasCondPayReceipt = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional RevealSecret reveal_secret = 32;
 * @return {?proto.rpc.RevealSecret}
 */
proto.rpc.CelerMsg.prototype.getRevealSecret = function() {
  return /** @type{?proto.rpc.RevealSecret} */ (
    jspb.Message.getWrapperField(this, proto.rpc.RevealSecret, 32));
};


/**
 * @param {?proto.rpc.RevealSecret|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setRevealSecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 32, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearRevealSecret = function() {
  return this.setRevealSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasRevealSecret = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional RevealSecretAck reveal_secret_ack = 33;
 * @return {?proto.rpc.RevealSecretAck}
 */
proto.rpc.CelerMsg.prototype.getRevealSecretAck = function() {
  return /** @type{?proto.rpc.RevealSecretAck} */ (
    jspb.Message.getWrapperField(this, proto.rpc.RevealSecretAck, 33));
};


/**
 * @param {?proto.rpc.RevealSecretAck|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setRevealSecretAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 33, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearRevealSecretAck = function() {
  return this.setRevealSecretAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasRevealSecretAck = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional entity.VouchedCondPayResult pay_result_vouch_request = 34;
 * @return {?proto.entity.VouchedCondPayResult}
 */
proto.rpc.CelerMsg.prototype.getPayResultVouchRequest = function() {
  return /** @type{?proto.entity.VouchedCondPayResult} */ (
    jspb.Message.getWrapperField(this, entity_pb.VouchedCondPayResult, 34));
};


/**
 * @param {?proto.entity.VouchedCondPayResult|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setPayResultVouchRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 34, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearPayResultVouchRequest = function() {
  return this.setPayResultVouchRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasPayResultVouchRequest = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional entity.VouchedCondPayResult pay_result_vouch_response = 35;
 * @return {?proto.entity.VouchedCondPayResult}
 */
proto.rpc.CelerMsg.prototype.getPayResultVouchResponse = function() {
  return /** @type{?proto.entity.VouchedCondPayResult} */ (
    jspb.Message.getWrapperField(this, entity_pb.VouchedCondPayResult, 35));
};


/**
 * @param {?proto.entity.VouchedCondPayResult|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
*/
proto.rpc.CelerMsg.prototype.setPayResultVouchResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 35, proto.rpc.CelerMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearPayResultVouchResponse = function() {
  return this.setPayResultVouchResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasPayResultVouchResponse = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional StateProof state_proof = 36;
 * @return 
 */
proto.rpc.CelerMsg.getStateProof = function() {
  return /** @type{?proto.rpc.StateProof} */ (
    jspb.Message.getWrapperField(this, proto.rpc.StateProof, 36));
};

/**
 * @param {?proto.rpc.StateProof|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.setStateProof = function(value) {
  return jspb.Message.setOneofWrapperField(this, 36, proto.rpc.CelerMsg.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearStateProof = function() {
  return this.setStateProof(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasStateProof = function() {
  return jspb.Message.getField(this, 36) != null;
};

/**
 * optional StateProofResponse state_prooof_response = 37;
 * @return {?proto.rpc.StateProofResponse}
 */
proto.rpc.CelerMsg.prototype.getStateProofResponse = function() {
  return /** @type{?proto.rpc.StateProofResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.StateProofResponse, 37));
};

/**
 * @param {?proto.rpc.StateProofResponse|undefined} value
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.setStateProofResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 37, proto.rpc.CelerMsg.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerMsg} returns this
 */
proto.rpc.CelerMsg.prototype.clearStateProofResponse = function() {
  return this.setStateProofResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerMsg.prototype.hasStateProofResponse = function() {
  return jspb.Message.getField(this, 37) != null;
};


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.Error}
 */
proto.rpc.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.Error;
  return proto.rpc.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.Error}
 */
proto.rpc.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rpc.ErrCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional ErrCode code = 1;
 * @return {!proto.rpc.ErrCode}
 */
proto.rpc.Error.prototype.getCode = function() {
  return /** @type {!proto.rpc.ErrCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rpc.ErrCode} value
 * @return {!proto.rpc.Error} returns this
 */
proto.rpc.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.rpc.Error.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.Error} returns this
 */
proto.rpc.Error.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 seq = 3;
 * @return {number}
 */
proto.rpc.Error.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.Error} returns this
 */
proto.rpc.Error.prototype.setSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.AuthReq.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.AuthReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.AuthReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AuthReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    myAddr: msg.getMyAddr_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mySig: msg.getMySig_asB64(),
    expectPeer: msg.getExpectPeer_asB64(),
    mutualAuth: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.AuthReq}
 */
proto.rpc.AuthReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.AuthReq;
  return proto.rpc.AuthReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.AuthReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.AuthReq}
 */
proto.rpc.AuthReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMyAddr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMySig(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExpectPeer(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMutualAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.AuthReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.AuthReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.AuthReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AuthReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMySig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getExpectPeer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getMutualAuth();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes my_addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.AuthReq.prototype.getMyAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes my_addr = 1;
 * This is a type-conversion wrapper around `getMyAddr()`
 * @return {string}
 */
proto.rpc.AuthReq.prototype.getMyAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMyAddr()));
};


/**
 * optional bytes my_addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMyAddr()`
 * @return {!Uint8Array}
 */
proto.rpc.AuthReq.prototype.getMyAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMyAddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.AuthReq} returns this
 */
proto.rpc.AuthReq.prototype.setMyAddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.rpc.AuthReq.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.AuthReq} returns this
 */
proto.rpc.AuthReq.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes my_sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.AuthReq.prototype.getMySig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes my_sig = 3;
 * This is a type-conversion wrapper around `getMySig()`
 * @return {string}
 */
proto.rpc.AuthReq.prototype.getMySig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMySig()));
};


/**
 * optional bytes my_sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMySig()`
 * @return {!Uint8Array}
 */
proto.rpc.AuthReq.prototype.getMySig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMySig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.AuthReq} returns this
 */
proto.rpc.AuthReq.prototype.setMySig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes expect_peer = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.AuthReq.prototype.getExpectPeer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes expect_peer = 4;
 * This is a type-conversion wrapper around `getExpectPeer()`
 * @return {string}
 */
proto.rpc.AuthReq.prototype.getExpectPeer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExpectPeer()));
};


/**
 * optional bytes expect_peer = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExpectPeer()`
 * @return {!Uint8Array}
 */
proto.rpc.AuthReq.prototype.getExpectPeer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExpectPeer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.AuthReq} returns this
 */
proto.rpc.AuthReq.prototype.setExpectPeer = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool mutual_auth = 5;
 * @return {boolean}
 */
proto.rpc.AuthReq.prototype.getMutualAuth = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.AuthReq} returns this
 */
proto.rpc.AuthReq.prototype.setMutualAuth = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.AuthAck.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.AuthAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.AuthAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AuthAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    startMid: (f = msg.getStartMid()) && proto.rpc.MID.toObject(includeInstance, f),
    mySig: msg.getMySig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.AuthAck}
 */
proto.rpc.AuthAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.AuthAck;
  return proto.rpc.AuthAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.AuthAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.AuthAck}
 */
proto.rpc.AuthAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.MID;
      reader.readMessage(value,proto.rpc.MID.deserializeBinaryFromReader);
      msg.setStartMid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMySig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.AuthAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.AuthAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.AuthAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.AuthAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartMid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.MID.serializeBinaryToWriter
    );
  }
  f = message.getMySig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional MID start_mid = 1;
 * @return {?proto.rpc.MID}
 */
proto.rpc.AuthAck.prototype.getStartMid = function() {
  return /** @type{?proto.rpc.MID} */ (
    jspb.Message.getWrapperField(this, proto.rpc.MID, 1));
};


/**
 * @param {?proto.rpc.MID|undefined} value
 * @return {!proto.rpc.AuthAck} returns this
*/
proto.rpc.AuthAck.prototype.setStartMid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.AuthAck} returns this
 */
proto.rpc.AuthAck.prototype.clearStartMid = function() {
  return this.setStartMid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.AuthAck.prototype.hasStartMid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes my_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.AuthAck.prototype.getMySig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes my_sig = 2;
 * This is a type-conversion wrapper around `getMySig()`
 * @return {string}
 */
proto.rpc.AuthAck.prototype.getMySig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMySig()));
};


/**
 * optional bytes my_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMySig()`
 * @return {!Uint8Array}
 */
proto.rpc.AuthAck.prototype.getMySig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMySig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.AuthAck} returns this
 */
proto.rpc.AuthAck.prototype.setMySig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.RevealSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.RevealSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.RevealSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.RevealSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    payId: msg.getPayId_asB64(),
    secret: msg.getSecret_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.RevealSecret}
 */
proto.rpc.RevealSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.RevealSecret;
  return proto.rpc.RevealSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.RevealSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.RevealSecret}
 */
proto.rpc.RevealSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.RevealSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.RevealSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.RevealSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.RevealSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSecret_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes pay_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.RevealSecret.prototype.getPayId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pay_id = 1;
 * This is a type-conversion wrapper around `getPayId()`
 * @return {string}
 */
proto.rpc.RevealSecret.prototype.getPayId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayId()));
};


/**
 * optional bytes pay_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayId()`
 * @return {!Uint8Array}
 */
proto.rpc.RevealSecret.prototype.getPayId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.RevealSecret} returns this
 */
proto.rpc.RevealSecret.prototype.setPayId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes secret = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.RevealSecret.prototype.getSecret = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes secret = 2;
 * This is a type-conversion wrapper around `getSecret()`
 * @return {string}
 */
proto.rpc.RevealSecret.prototype.getSecret_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecret()));
};


/**
 * optional bytes secret = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecret()`
 * @return {!Uint8Array}
 */
proto.rpc.RevealSecret.prototype.getSecret_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecret()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.RevealSecret} returns this
 */
proto.rpc.RevealSecret.prototype.setSecret = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.RevealSecretAck.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.RevealSecretAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.RevealSecretAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.RevealSecretAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    payId: msg.getPayId_asB64(),
    payDestSecretSig: msg.getPayDestSecretSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.RevealSecretAck}
 */
proto.rpc.RevealSecretAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.RevealSecretAck;
  return proto.rpc.RevealSecretAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.RevealSecretAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.RevealSecretAck}
 */
proto.rpc.RevealSecretAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayDestSecretSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.RevealSecretAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.RevealSecretAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.RevealSecretAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.RevealSecretAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPayDestSecretSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes pay_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.RevealSecretAck.prototype.getPayId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pay_id = 1;
 * This is a type-conversion wrapper around `getPayId()`
 * @return {string}
 */
proto.rpc.RevealSecretAck.prototype.getPayId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayId()));
};


/**
 * optional bytes pay_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayId()`
 * @return {!Uint8Array}
 */
proto.rpc.RevealSecretAck.prototype.getPayId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.RevealSecretAck} returns this
 */
proto.rpc.RevealSecretAck.prototype.setPayId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes pay_dest_secret_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.RevealSecretAck.prototype.getPayDestSecretSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pay_dest_secret_sig = 2;
 * This is a type-conversion wrapper around `getPayDestSecretSig()`
 * @return {string}
 */
proto.rpc.RevealSecretAck.prototype.getPayDestSecretSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayDestSecretSig()));
};


/**
 * optional bytes pay_dest_secret_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayDestSecretSig()`
 * @return {!Uint8Array}
 */
proto.rpc.RevealSecretAck.prototype.getPayDestSecretSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayDestSecretSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.RevealSecretAck} returns this
 */
proto.rpc.RevealSecretAck.prototype.setPayDestSecretSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.CondPayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.CondPayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.CondPayRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CondPayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    condPay: msg.getCondPay_asB64(),
    stateOnlyPeerFromSig: (f = msg.getStateOnlyPeerFromSig()) && proto.rpc.SignedSimplexState.toObject(includeInstance, f),
    note: (f = msg.getNote()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    baseSeq: jspb.Message.getFieldWithDefault(msg, 4, 0),
    directPay: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.CondPayRequest}
 */
proto.rpc.CondPayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.CondPayRequest;
  return proto.rpc.CondPayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.CondPayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.CondPayRequest}
 */
proto.rpc.CondPayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCondPay(value);
      break;
    case 2:
      var value = new proto.rpc.SignedSimplexState;
      reader.readMessage(value,proto.rpc.SignedSimplexState.deserializeBinaryFromReader);
      msg.setStateOnlyPeerFromSig(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setNote(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBaseSeq(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDirectPay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.CondPayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.CondPayRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.CondPayRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CondPayRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondPay_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStateOnlyPeerFromSig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.SignedSimplexState.serializeBinaryToWriter
    );
  }
  f = message.getNote();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getBaseSeq();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDirectPay();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes cond_pay = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CondPayRequest.prototype.getCondPay = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cond_pay = 1;
 * This is a type-conversion wrapper around `getCondPay()`
 * @return {string}
 */
proto.rpc.CondPayRequest.prototype.getCondPay_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCondPay()));
};


/**
 * optional bytes cond_pay = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCondPay()`
 * @return {!Uint8Array}
 */
proto.rpc.CondPayRequest.prototype.getCondPay_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCondPay()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CondPayRequest} returns this
 */
proto.rpc.CondPayRequest.prototype.setCondPay = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional SignedSimplexState state_only_peer_from_sig = 2;
 * @return {?proto.rpc.SignedSimplexState}
 */
proto.rpc.CondPayRequest.prototype.getStateOnlyPeerFromSig = function() {
  return /** @type{?proto.rpc.SignedSimplexState} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SignedSimplexState, 2));
};


/**
 * @param {?proto.rpc.SignedSimplexState|undefined} value
 * @return {!proto.rpc.CondPayRequest} returns this
*/
proto.rpc.CondPayRequest.prototype.setStateOnlyPeerFromSig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CondPayRequest} returns this
 */
proto.rpc.CondPayRequest.prototype.clearStateOnlyPeerFromSig = function() {
  return this.setStateOnlyPeerFromSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CondPayRequest.prototype.hasStateOnlyPeerFromSig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Any note = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.rpc.CondPayRequest.prototype.getNote = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.rpc.CondPayRequest} returns this
*/
proto.rpc.CondPayRequest.prototype.setNote = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CondPayRequest} returns this
 */
proto.rpc.CondPayRequest.prototype.clearNote = function() {
  return this.setNote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CondPayRequest.prototype.hasNote = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 base_seq = 4;
 * @return {number}
 */
proto.rpc.CondPayRequest.prototype.getBaseSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.CondPayRequest} returns this
 */
proto.rpc.CondPayRequest.prototype.setBaseSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool direct_pay = 5;
 * @return {boolean}
 */
proto.rpc.CondPayRequest.prototype.getDirectPay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.CondPayRequest} returns this
 */
proto.rpc.CondPayRequest.prototype.setDirectPay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.CondPayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.CondPayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.CondPayResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CondPayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateCosigned: (f = msg.getStateCosigned()) && proto.rpc.SignedSimplexState.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.rpc.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.CondPayResponse}
 */
proto.rpc.CondPayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.CondPayResponse;
  return proto.rpc.CondPayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.CondPayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.CondPayResponse}
 */
proto.rpc.CondPayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.SignedSimplexState;
      reader.readMessage(value,proto.rpc.SignedSimplexState.deserializeBinaryFromReader);
      msg.setStateCosigned(value);
      break;
    case 2:
      var value = new proto.rpc.Error;
      reader.readMessage(value,proto.rpc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.CondPayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.CondPayResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.CondPayResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CondPayResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateCosigned();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.SignedSimplexState.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignedSimplexState state_cosigned = 1;
 * @return {?proto.rpc.SignedSimplexState}
 */
proto.rpc.CondPayResponse.prototype.getStateCosigned = function() {
  return /** @type{?proto.rpc.SignedSimplexState} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SignedSimplexState, 1));
};


/**
 * @param {?proto.rpc.SignedSimplexState|undefined} value
 * @return {!proto.rpc.CondPayResponse} returns this
*/
proto.rpc.CondPayResponse.prototype.setStateCosigned = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CondPayResponse} returns this
 */
proto.rpc.CondPayResponse.prototype.clearStateCosigned = function() {
  return this.setStateCosigned(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CondPayResponse.prototype.hasStateCosigned = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.rpc.Error}
 */
proto.rpc.CondPayResponse.prototype.getError = function() {
  return /** @type{?proto.rpc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rpc.Error, 2));
};


/**
 * @param {?proto.rpc.Error|undefined} value
 * @return {!proto.rpc.CondPayResponse} returns this
*/
proto.rpc.CondPayResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CondPayResponse} returns this
 */
proto.rpc.CondPayResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CondPayResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SettledPayment.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SettledPayment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SettledPayment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.SettledPayment.toObject = function(includeInstance, msg) {
  var f, obj = {
    settledPayId: msg.getSettledPayId_asB64(),
    reason: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: msg.getAmount_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SettledPayment}
 */
proto.rpc.SettledPayment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SettledPayment;
  return proto.rpc.SettledPayment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SettledPayment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SettledPayment}
 */
proto.rpc.SettledPayment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSettledPayId(value);
      break;
    case 2:
      var value = /** @type {!proto.rpc.PaymentSettleReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SettledPayment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.SettledPayment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SettledPayment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.SettledPayment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettledPayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes settled_pay_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.SettledPayment.prototype.getSettledPayId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes settled_pay_id = 1;
 * This is a type-conversion wrapper around `getSettledPayId()`
 * @return {string}
 */
proto.rpc.SettledPayment.prototype.getSettledPayId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSettledPayId()));
};


/**
 * optional bytes settled_pay_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSettledPayId()`
 * @return {!Uint8Array}
 */
proto.rpc.SettledPayment.prototype.getSettledPayId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSettledPayId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.SettledPayment} returns this
 */
proto.rpc.SettledPayment.prototype.setSettledPayId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional PaymentSettleReason reason = 2;
 * @return {!proto.rpc.PaymentSettleReason}
 */
proto.rpc.SettledPayment.prototype.getReason = function() {
  return /** @type {!proto.rpc.PaymentSettleReason} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rpc.PaymentSettleReason} value
 * @return {!proto.rpc.SettledPayment} returns this
 */
proto.rpc.SettledPayment.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes amount = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.SettledPayment.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes amount = 3;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.rpc.SettledPayment.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.rpc.SettledPayment.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.SettledPayment} returns this
 */
proto.rpc.SettledPayment.prototype.setAmount = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.PaymentSettleProof.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.PaymentSettleProof.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.PaymentSettleProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.PaymentSettleProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PaymentSettleProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    vouchedCondPayResultsList: jspb.Message.toObjectList(msg.getVouchedCondPayResultsList(),
    entity_pb.VouchedCondPayResult.toObject, includeInstance),
    settledPaysList: jspb.Message.toObjectList(msg.getSettledPaysList(),
    proto.rpc.SettledPayment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.PaymentSettleProof}
 */
proto.rpc.PaymentSettleProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.PaymentSettleProof;
  return proto.rpc.PaymentSettleProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.PaymentSettleProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.PaymentSettleProof}
 */
proto.rpc.PaymentSettleProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new entity_pb.VouchedCondPayResult;
      reader.readMessage(value,entity_pb.VouchedCondPayResult.deserializeBinaryFromReader);
      msg.addVouchedCondPayResults(value);
      break;
    case 2:
      var value = new proto.rpc.SettledPayment;
      reader.readMessage(value,proto.rpc.SettledPayment.deserializeBinaryFromReader);
      msg.addSettledPays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.PaymentSettleProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.PaymentSettleProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.PaymentSettleProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PaymentSettleProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVouchedCondPayResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      entity_pb.VouchedCondPayResult.serializeBinaryToWriter
    );
  }
  f = message.getSettledPaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rpc.SettledPayment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated entity.VouchedCondPayResult vouched_cond_pay_results = 1;
 * @return {!Array<!proto.entity.VouchedCondPayResult>}
 */
proto.rpc.PaymentSettleProof.prototype.getVouchedCondPayResultsList = function() {
  return /** @type{!Array<!proto.entity.VouchedCondPayResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, entity_pb.VouchedCondPayResult, 1));
};


/**
 * @param {!Array<!proto.entity.VouchedCondPayResult>} value
 * @return {!proto.rpc.PaymentSettleProof} returns this
*/
proto.rpc.PaymentSettleProof.prototype.setVouchedCondPayResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.entity.VouchedCondPayResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.entity.VouchedCondPayResult}
 */
proto.rpc.PaymentSettleProof.prototype.addVouchedCondPayResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.entity.VouchedCondPayResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.PaymentSettleProof} returns this
 */
proto.rpc.PaymentSettleProof.prototype.clearVouchedCondPayResultsList = function() {
  return this.setVouchedCondPayResultsList([]);
};


/**
 * repeated SettledPayment settled_pays = 2;
 * @return {!Array<!proto.rpc.SettledPayment>}
 */
proto.rpc.PaymentSettleProof.prototype.getSettledPaysList = function() {
  return /** @type{!Array<!proto.rpc.SettledPayment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.SettledPayment, 2));
};


/**
 * @param {!Array<!proto.rpc.SettledPayment>} value
 * @return {!proto.rpc.PaymentSettleProof} returns this
*/
proto.rpc.PaymentSettleProof.prototype.setSettledPaysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rpc.SettledPayment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.SettledPayment}
 */
proto.rpc.PaymentSettleProof.prototype.addSettledPays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rpc.SettledPayment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.PaymentSettleProof} returns this
 */
proto.rpc.PaymentSettleProof.prototype.clearSettledPaysList = function() {
  return this.setSettledPaysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.PaymentSettleRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.PaymentSettleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.PaymentSettleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.PaymentSettleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PaymentSettleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    settledPaysList: jspb.Message.toObjectList(msg.getSettledPaysList(),
    proto.rpc.SettledPayment.toObject, includeInstance),
    stateOnlyPeerFromSig: (f = msg.getStateOnlyPeerFromSig()) && proto.rpc.SignedSimplexState.toObject(includeInstance, f),
    baseSeq: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.PaymentSettleRequest}
 */
proto.rpc.PaymentSettleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.PaymentSettleRequest;
  return proto.rpc.PaymentSettleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.PaymentSettleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.PaymentSettleRequest}
 */
proto.rpc.PaymentSettleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.SettledPayment;
      reader.readMessage(value,proto.rpc.SettledPayment.deserializeBinaryFromReader);
      msg.addSettledPays(value);
      break;
    case 2:
      var value = new proto.rpc.SignedSimplexState;
      reader.readMessage(value,proto.rpc.SignedSimplexState.deserializeBinaryFromReader);
      msg.setStateOnlyPeerFromSig(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBaseSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.PaymentSettleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.PaymentSettleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.PaymentSettleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PaymentSettleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettledPaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpc.SettledPayment.serializeBinaryToWriter
    );
  }
  f = message.getStateOnlyPeerFromSig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.SignedSimplexState.serializeBinaryToWriter
    );
  }
  f = message.getBaseSeq();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * repeated SettledPayment settled_pays = 1;
 * @return {!Array<!proto.rpc.SettledPayment>}
 */
proto.rpc.PaymentSettleRequest.prototype.getSettledPaysList = function() {
  return /** @type{!Array<!proto.rpc.SettledPayment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.SettledPayment, 1));
};


/**
 * @param {!Array<!proto.rpc.SettledPayment>} value
 * @return {!proto.rpc.PaymentSettleRequest} returns this
*/
proto.rpc.PaymentSettleRequest.prototype.setSettledPaysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rpc.SettledPayment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.SettledPayment}
 */
proto.rpc.PaymentSettleRequest.prototype.addSettledPays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpc.SettledPayment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.PaymentSettleRequest} returns this
 */
proto.rpc.PaymentSettleRequest.prototype.clearSettledPaysList = function() {
  return this.setSettledPaysList([]);
};


/**
 * optional SignedSimplexState state_only_peer_from_sig = 2;
 * @return {?proto.rpc.SignedSimplexState}
 */
proto.rpc.PaymentSettleRequest.prototype.getStateOnlyPeerFromSig = function() {
  return /** @type{?proto.rpc.SignedSimplexState} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SignedSimplexState, 2));
};


/**
 * @param {?proto.rpc.SignedSimplexState|undefined} value
 * @return {!proto.rpc.PaymentSettleRequest} returns this
*/
proto.rpc.PaymentSettleRequest.prototype.setStateOnlyPeerFromSig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.PaymentSettleRequest} returns this
 */
proto.rpc.PaymentSettleRequest.prototype.clearStateOnlyPeerFromSig = function() {
  return this.setStateOnlyPeerFromSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.PaymentSettleRequest.prototype.hasStateOnlyPeerFromSig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 base_seq = 3;
 * @return {number}
 */
proto.rpc.PaymentSettleRequest.prototype.getBaseSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.PaymentSettleRequest} returns this
 */
proto.rpc.PaymentSettleRequest.prototype.setBaseSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.PaymentSettleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.PaymentSettleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.PaymentSettleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PaymentSettleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateCosigned: (f = msg.getStateCosigned()) && proto.rpc.SignedSimplexState.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.rpc.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.PaymentSettleResponse}
 */
proto.rpc.PaymentSettleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.PaymentSettleResponse;
  return proto.rpc.PaymentSettleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.PaymentSettleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.PaymentSettleResponse}
 */
proto.rpc.PaymentSettleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.SignedSimplexState;
      reader.readMessage(value,proto.rpc.SignedSimplexState.deserializeBinaryFromReader);
      msg.setStateCosigned(value);
      break;
    case 3:
      var value = new proto.rpc.Error;
      reader.readMessage(value,proto.rpc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.PaymentSettleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.PaymentSettleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.PaymentSettleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PaymentSettleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateCosigned();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.SignedSimplexState.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpc.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignedSimplexState state_cosigned = 1;
 * @return {?proto.rpc.SignedSimplexState}
 */
proto.rpc.PaymentSettleResponse.prototype.getStateCosigned = function() {
  return /** @type{?proto.rpc.SignedSimplexState} */ (
    jspb.Message.getWrapperField(this, proto.rpc.SignedSimplexState, 1));
};


/**
 * @param {?proto.rpc.SignedSimplexState|undefined} value
 * @return {!proto.rpc.PaymentSettleResponse} returns this
*/
proto.rpc.PaymentSettleResponse.prototype.setStateCosigned = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.PaymentSettleResponse} returns this
 */
proto.rpc.PaymentSettleResponse.prototype.clearStateCosigned = function() {
  return this.setStateCosigned(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.PaymentSettleResponse.prototype.hasStateCosigned = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 3;
 * @return {?proto.rpc.Error}
 */
proto.rpc.PaymentSettleResponse.prototype.getError = function() {
  return /** @type{?proto.rpc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rpc.Error, 3));
};


/**
 * @param {?proto.rpc.Error|undefined} value
 * @return {!proto.rpc.PaymentSettleResponse} returns this
*/
proto.rpc.PaymentSettleResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.PaymentSettleResponse} returns this
 */
proto.rpc.PaymentSettleResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.PaymentSettleResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OpenChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OpenChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OpenChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.OpenChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelInitializer: msg.getChannelInitializer_asB64(),
    requesterSig: msg.getRequesterSig_asB64(),
    openBy: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ospToOsp: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OpenChannelRequest}
 */
proto.rpc.OpenChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OpenChannelRequest;
  return proto.rpc.OpenChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OpenChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OpenChannelRequest}
 */
proto.rpc.OpenChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelInitializer(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequesterSig(value);
      break;
    case 3:
      var value = /** @type {!proto.rpc.OpenChannelBy} */ (reader.readEnum());
      msg.setOpenBy(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOspToOsp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OpenChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.OpenChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OpenChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.OpenChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelInitializer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRequesterSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOpenBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOspToOsp();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes channel_initializer = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.OpenChannelRequest.prototype.getChannelInitializer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_initializer = 1;
 * This is a type-conversion wrapper around `getChannelInitializer()`
 * @return {string}
 */
proto.rpc.OpenChannelRequest.prototype.getChannelInitializer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelInitializer()));
};


/**
 * optional bytes channel_initializer = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelInitializer()`
 * @return {!Uint8Array}
 */
proto.rpc.OpenChannelRequest.prototype.getChannelInitializer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelInitializer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.OpenChannelRequest} returns this
 */
proto.rpc.OpenChannelRequest.prototype.setChannelInitializer = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes requester_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.OpenChannelRequest.prototype.getRequesterSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes requester_sig = 2;
 * This is a type-conversion wrapper around `getRequesterSig()`
 * @return {string}
 */
proto.rpc.OpenChannelRequest.prototype.getRequesterSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequesterSig()));
};


/**
 * optional bytes requester_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequesterSig()`
 * @return {!Uint8Array}
 */
proto.rpc.OpenChannelRequest.prototype.getRequesterSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequesterSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.OpenChannelRequest} returns this
 */
proto.rpc.OpenChannelRequest.prototype.setRequesterSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional OpenChannelBy open_by = 3;
 * @return {!proto.rpc.OpenChannelBy}
 */
proto.rpc.OpenChannelRequest.prototype.getOpenBy = function() {
  return /** @type {!proto.rpc.OpenChannelBy} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rpc.OpenChannelBy} value
 * @return {!proto.rpc.OpenChannelRequest} returns this
 */
proto.rpc.OpenChannelRequest.prototype.setOpenBy = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool osp_to_osp = 4;
 * @return {boolean}
 */
proto.rpc.OpenChannelRequest.prototype.getOspToOsp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.OpenChannelRequest} returns this
 */
proto.rpc.OpenChannelRequest.prototype.setOspToOsp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.OpenChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.OpenChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.OpenChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.OpenChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelInitializer: msg.getChannelInitializer_asB64(),
    requesterSig: msg.getRequesterSig_asB64(),
    approverSig: msg.getApproverSig_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    paymentChannelId: msg.getPaymentChannelId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.OpenChannelResponse}
 */
proto.rpc.OpenChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.OpenChannelResponse;
  return proto.rpc.OpenChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.OpenChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.OpenChannelResponse}
 */
proto.rpc.OpenChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelInitializer(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequesterSig(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setApproverSig(value);
      break;
    case 4:
      var value = /** @type {!proto.rpc.OpenChannelStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPaymentChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.OpenChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.OpenChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.OpenChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.OpenChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelInitializer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRequesterSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getApproverSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPaymentChannelId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes channel_initializer = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.OpenChannelResponse.prototype.getChannelInitializer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_initializer = 1;
 * This is a type-conversion wrapper around `getChannelInitializer()`
 * @return {string}
 */
proto.rpc.OpenChannelResponse.prototype.getChannelInitializer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelInitializer()));
};


/**
 * optional bytes channel_initializer = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelInitializer()`
 * @return {!Uint8Array}
 */
proto.rpc.OpenChannelResponse.prototype.getChannelInitializer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelInitializer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.OpenChannelResponse} returns this
 */
proto.rpc.OpenChannelResponse.prototype.setChannelInitializer = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes requester_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.OpenChannelResponse.prototype.getRequesterSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes requester_sig = 2;
 * This is a type-conversion wrapper around `getRequesterSig()`
 * @return {string}
 */
proto.rpc.OpenChannelResponse.prototype.getRequesterSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequesterSig()));
};


/**
 * optional bytes requester_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequesterSig()`
 * @return {!Uint8Array}
 */
proto.rpc.OpenChannelResponse.prototype.getRequesterSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequesterSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.OpenChannelResponse} returns this
 */
proto.rpc.OpenChannelResponse.prototype.setRequesterSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes approver_sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.OpenChannelResponse.prototype.getApproverSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes approver_sig = 3;
 * This is a type-conversion wrapper around `getApproverSig()`
 * @return {string}
 */
proto.rpc.OpenChannelResponse.prototype.getApproverSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getApproverSig()));
};


/**
 * optional bytes approver_sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getApproverSig()`
 * @return {!Uint8Array}
 */
proto.rpc.OpenChannelResponse.prototype.getApproverSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getApproverSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.OpenChannelResponse} returns this
 */
proto.rpc.OpenChannelResponse.prototype.setApproverSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional OpenChannelStatus status = 4;
 * @return {!proto.rpc.OpenChannelStatus}
 */
proto.rpc.OpenChannelResponse.prototype.getStatus = function() {
  return /** @type {!proto.rpc.OpenChannelStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.rpc.OpenChannelStatus} value
 * @return {!proto.rpc.OpenChannelResponse} returns this
 */
proto.rpc.OpenChannelResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes payment_channel_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.OpenChannelResponse.prototype.getPaymentChannelId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes payment_channel_id = 5;
 * This is a type-conversion wrapper around `getPaymentChannelId()`
 * @return {string}
 */
proto.rpc.OpenChannelResponse.prototype.getPaymentChannelId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPaymentChannelId()));
};


/**
 * optional bytes payment_channel_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPaymentChannelId()`
 * @return {!Uint8Array}
 */
proto.rpc.OpenChannelResponse.prototype.getPaymentChannelId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPaymentChannelId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.OpenChannelResponse} returns this
 */
proto.rpc.OpenChannelResponse.prototype.setPaymentChannelId = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.CooperativeWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.CooperativeWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.CooperativeWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CooperativeWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    withdrawInfo: (f = msg.getWithdrawInfo()) && entity_pb.CooperativeWithdrawInfo.toObject(includeInstance, f),
    requesterSig: msg.getRequesterSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.CooperativeWithdrawRequest}
 */
proto.rpc.CooperativeWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.CooperativeWithdrawRequest;
  return proto.rpc.CooperativeWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.CooperativeWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.CooperativeWithdrawRequest}
 */
proto.rpc.CooperativeWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new entity_pb.CooperativeWithdrawInfo;
      reader.readMessage(value,entity_pb.CooperativeWithdrawInfo.deserializeBinaryFromReader);
      msg.setWithdrawInfo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequesterSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.CooperativeWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.CooperativeWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.CooperativeWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CooperativeWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithdrawInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      entity_pb.CooperativeWithdrawInfo.serializeBinaryToWriter
    );
  }
  f = message.getRequesterSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional entity.CooperativeWithdrawInfo withdraw_info = 1;
 * @return {?proto.entity.CooperativeWithdrawInfo}
 */
proto.rpc.CooperativeWithdrawRequest.prototype.getWithdrawInfo = function() {
  return /** @type{?proto.entity.CooperativeWithdrawInfo} */ (
    jspb.Message.getWrapperField(this, entity_pb.CooperativeWithdrawInfo, 1));
};


/**
 * @param {?proto.entity.CooperativeWithdrawInfo|undefined} value
 * @return {!proto.rpc.CooperativeWithdrawRequest} returns this
*/
proto.rpc.CooperativeWithdrawRequest.prototype.setWithdrawInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CooperativeWithdrawRequest} returns this
 */
proto.rpc.CooperativeWithdrawRequest.prototype.clearWithdrawInfo = function() {
  return this.setWithdrawInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CooperativeWithdrawRequest.prototype.hasWithdrawInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes requester_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CooperativeWithdrawRequest.prototype.getRequesterSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes requester_sig = 2;
 * This is a type-conversion wrapper around `getRequesterSig()`
 * @return {string}
 */
proto.rpc.CooperativeWithdrawRequest.prototype.getRequesterSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequesterSig()));
};


/**
 * optional bytes requester_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequesterSig()`
 * @return {!Uint8Array}
 */
proto.rpc.CooperativeWithdrawRequest.prototype.getRequesterSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequesterSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CooperativeWithdrawRequest} returns this
 */
proto.rpc.CooperativeWithdrawRequest.prototype.setRequesterSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.CooperativeWithdrawResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.CooperativeWithdrawResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CooperativeWithdrawResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    withdrawInfo: (f = msg.getWithdrawInfo()) && entity_pb.CooperativeWithdrawInfo.toObject(includeInstance, f),
    requesterSig: msg.getRequesterSig_asB64(),
    approverSig: msg.getApproverSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.CooperativeWithdrawResponse}
 */
proto.rpc.CooperativeWithdrawResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.CooperativeWithdrawResponse;
  return proto.rpc.CooperativeWithdrawResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.CooperativeWithdrawResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.CooperativeWithdrawResponse}
 */
proto.rpc.CooperativeWithdrawResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new entity_pb.CooperativeWithdrawInfo;
      reader.readMessage(value,entity_pb.CooperativeWithdrawInfo.deserializeBinaryFromReader);
      msg.setWithdrawInfo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequesterSig(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setApproverSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.CooperativeWithdrawResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.CooperativeWithdrawResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CooperativeWithdrawResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithdrawInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      entity_pb.CooperativeWithdrawInfo.serializeBinaryToWriter
    );
  }
  f = message.getRequesterSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getApproverSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional entity.CooperativeWithdrawInfo withdraw_info = 1;
 * @return {?proto.entity.CooperativeWithdrawInfo}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.getWithdrawInfo = function() {
  return /** @type{?proto.entity.CooperativeWithdrawInfo} */ (
    jspb.Message.getWrapperField(this, entity_pb.CooperativeWithdrawInfo, 1));
};


/**
 * @param {?proto.entity.CooperativeWithdrawInfo|undefined} value
 * @return {!proto.rpc.CooperativeWithdrawResponse} returns this
*/
proto.rpc.CooperativeWithdrawResponse.prototype.setWithdrawInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CooperativeWithdrawResponse} returns this
 */
proto.rpc.CooperativeWithdrawResponse.prototype.clearWithdrawInfo = function() {
  return this.setWithdrawInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.hasWithdrawInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes requester_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.getRequesterSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes requester_sig = 2;
 * This is a type-conversion wrapper around `getRequesterSig()`
 * @return {string}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.getRequesterSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequesterSig()));
};


/**
 * optional bytes requester_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequesterSig()`
 * @return {!Uint8Array}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.getRequesterSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequesterSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CooperativeWithdrawResponse} returns this
 */
proto.rpc.CooperativeWithdrawResponse.prototype.setRequesterSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes approver_sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.getApproverSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes approver_sig = 3;
 * This is a type-conversion wrapper around `getApproverSig()`
 * @return {string}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.getApproverSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getApproverSig()));
};


/**
 * optional bytes approver_sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getApproverSig()`
 * @return {!Uint8Array}
 */
proto.rpc.CooperativeWithdrawResponse.prototype.getApproverSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getApproverSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CooperativeWithdrawResponse} returns this
 */
proto.rpc.CooperativeWithdrawResponse.prototype.setApproverSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.CondPayReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.CondPayReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.CondPayReceipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CondPayReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    payId: msg.getPayId_asB64(),
    payDestSig: msg.getPayDestSig_asB64(),
    payDelegatorSig: msg.getPayDelegatorSig_asB64(),
    delegationProof: (f = msg.getDelegationProof()) && proto.rpc.DelegationProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.CondPayReceipt}
 */
proto.rpc.CondPayReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.CondPayReceipt;
  return proto.rpc.CondPayReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.CondPayReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.CondPayReceipt}
 */
proto.rpc.CondPayReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayDestSig(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayDelegatorSig(value);
      break;
    case 4:
      var value = new proto.rpc.DelegationProof;
      reader.readMessage(value,proto.rpc.DelegationProof.deserializeBinaryFromReader);
      msg.setDelegationProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.CondPayReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.CondPayReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.CondPayReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CondPayReceipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPayDestSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPayDelegatorSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDelegationProof();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rpc.DelegationProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes pay_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CondPayReceipt.prototype.getPayId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pay_id = 1;
 * This is a type-conversion wrapper around `getPayId()`
 * @return {string}
 */
proto.rpc.CondPayReceipt.prototype.getPayId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayId()));
};


/**
 * optional bytes pay_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayId()`
 * @return {!Uint8Array}
 */
proto.rpc.CondPayReceipt.prototype.getPayId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CondPayReceipt} returns this
 */
proto.rpc.CondPayReceipt.prototype.setPayId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes pay_dest_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CondPayReceipt.prototype.getPayDestSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pay_dest_sig = 2;
 * This is a type-conversion wrapper around `getPayDestSig()`
 * @return {string}
 */
proto.rpc.CondPayReceipt.prototype.getPayDestSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayDestSig()));
};


/**
 * optional bytes pay_dest_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayDestSig()`
 * @return {!Uint8Array}
 */
proto.rpc.CondPayReceipt.prototype.getPayDestSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayDestSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CondPayReceipt} returns this
 */
proto.rpc.CondPayReceipt.prototype.setPayDestSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes pay_delegator_sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CondPayReceipt.prototype.getPayDelegatorSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pay_delegator_sig = 3;
 * This is a type-conversion wrapper around `getPayDelegatorSig()`
 * @return {string}
 */
proto.rpc.CondPayReceipt.prototype.getPayDelegatorSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayDelegatorSig()));
};


/**
 * optional bytes pay_delegator_sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayDelegatorSig()`
 * @return {!Uint8Array}
 */
proto.rpc.CondPayReceipt.prototype.getPayDelegatorSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayDelegatorSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CondPayReceipt} returns this
 */
proto.rpc.CondPayReceipt.prototype.setPayDelegatorSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional DelegationProof delegation_proof = 4;
 * @return {?proto.rpc.DelegationProof}
 */
proto.rpc.CondPayReceipt.prototype.getDelegationProof = function() {
  return /** @type{?proto.rpc.DelegationProof} */ (
    jspb.Message.getWrapperField(this, proto.rpc.DelegationProof, 4));
};


/**
 * @param {?proto.rpc.DelegationProof|undefined} value
 * @return {!proto.rpc.CondPayReceipt} returns this
*/
proto.rpc.CondPayReceipt.prototype.setDelegationProof = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CondPayReceipt} returns this
 */
proto.rpc.CondPayReceipt.prototype.clearDelegationProof = function() {
  return this.setDelegationProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CondPayReceipt.prototype.hasDelegationProof = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SignedSimplexState.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SignedSimplexState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SignedSimplexState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.SignedSimplexState.toObject = function(includeInstance, msg) {
  var f, obj = {
    simplexState: msg.getSimplexState_asB64(),
    sigOfPeerFrom: msg.getSigOfPeerFrom_asB64(),
    sigOfPeerTo: msg.getSigOfPeerTo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SignedSimplexState}
 */
proto.rpc.SignedSimplexState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SignedSimplexState;
  return proto.rpc.SignedSimplexState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SignedSimplexState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SignedSimplexState}
 */
proto.rpc.SignedSimplexState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSimplexState(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigOfPeerFrom(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigOfPeerTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SignedSimplexState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.SignedSimplexState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SignedSimplexState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.SignedSimplexState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimplexState_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigOfPeerFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSigOfPeerTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes simplex_state = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.SignedSimplexState.prototype.getSimplexState = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes simplex_state = 1;
 * This is a type-conversion wrapper around `getSimplexState()`
 * @return {string}
 */
proto.rpc.SignedSimplexState.prototype.getSimplexState_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSimplexState()));
};


/**
 * optional bytes simplex_state = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSimplexState()`
 * @return {!Uint8Array}
 */
proto.rpc.SignedSimplexState.prototype.getSimplexState_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSimplexState()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.SignedSimplexState} returns this
 */
proto.rpc.SignedSimplexState.prototype.setSimplexState = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sig_of_peer_from = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.SignedSimplexState.prototype.getSigOfPeerFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sig_of_peer_from = 2;
 * This is a type-conversion wrapper around `getSigOfPeerFrom()`
 * @return {string}
 */
proto.rpc.SignedSimplexState.prototype.getSigOfPeerFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigOfPeerFrom()));
};


/**
 * optional bytes sig_of_peer_from = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigOfPeerFrom()`
 * @return {!Uint8Array}
 */
proto.rpc.SignedSimplexState.prototype.getSigOfPeerFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigOfPeerFrom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.SignedSimplexState} returns this
 */
proto.rpc.SignedSimplexState.prototype.setSigOfPeerFrom = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sig_of_peer_to = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.SignedSimplexState.prototype.getSigOfPeerTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig_of_peer_to = 3;
 * This is a type-conversion wrapper around `getSigOfPeerTo()`
 * @return {string}
 */
proto.rpc.SignedSimplexState.prototype.getSigOfPeerTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigOfPeerTo()));
};


/**
 * optional bytes sig_of_peer_to = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigOfPeerTo()`
 * @return {!Uint8Array}
 */
proto.rpc.SignedSimplexState.prototype.getSigOfPeerTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigOfPeerTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.SignedSimplexState} returns this
 */
proto.rpc.SignedSimplexState.prototype.setSigOfPeerTo = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.SignedDuplexState.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.SignedDuplexState.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.SignedDuplexState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.SignedDuplexState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.SignedDuplexState.toObject = function(includeInstance, msg) {
  var f, obj = {
    simplexStatesList: jspb.Message.toObjectList(msg.getSimplexStatesList(),
    proto.rpc.SignedSimplexState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.SignedDuplexState}
 */
proto.rpc.SignedDuplexState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.SignedDuplexState;
  return proto.rpc.SignedDuplexState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.SignedDuplexState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.SignedDuplexState}
 */
proto.rpc.SignedDuplexState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.SignedSimplexState;
      reader.readMessage(value,proto.rpc.SignedSimplexState.deserializeBinaryFromReader);
      msg.addSimplexStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.SignedDuplexState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.SignedDuplexState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.SignedDuplexState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.SignedDuplexState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimplexStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpc.SignedSimplexState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SignedSimplexState simplex_states = 1;
 * @return {!Array<!proto.rpc.SignedSimplexState>}
 */
proto.rpc.SignedDuplexState.prototype.getSimplexStatesList = function() {
  return /** @type{!Array<!proto.rpc.SignedSimplexState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.SignedSimplexState, 1));
};


/**
 * @param {!Array<!proto.rpc.SignedSimplexState>} value
 * @return {!proto.rpc.SignedDuplexState} returns this
*/
proto.rpc.SignedDuplexState.prototype.setSimplexStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rpc.SignedSimplexState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.SignedSimplexState}
 */
proto.rpc.SignedDuplexState.prototype.addSimplexStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpc.SignedSimplexState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.SignedDuplexState} returns this
 */
proto.rpc.SignedDuplexState.prototype.clearSimplexStatesList = function() {
  return this.setSimplexStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.PeerAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.PeerAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.PeerAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PeerAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenAddr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.PeerAddress}
 */
proto.rpc.PeerAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.PeerAddress;
  return proto.rpc.PeerAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.PeerAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.PeerAddress}
 */
proto.rpc.PeerAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.PeerAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.PeerAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.PeerAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PeerAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.rpc.PeerAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.PeerAddress} returns this
 */
proto.rpc.PeerAddress.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token_addr = 2;
 * @return {string}
 */
proto.rpc.PeerAddress.prototype.getTokenAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.PeerAddress} returns this
 */
proto.rpc.PeerAddress.prototype.setTokenAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.PeerStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.PeerStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.PeerStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PeerStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    freeBalance: jspb.Message.getFieldWithDefault(msg, 1, ""),
    joinStatus: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.PeerStatus}
 */
proto.rpc.PeerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.PeerStatus;
  return proto.rpc.PeerStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.PeerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.PeerStatus}
 */
proto.rpc.PeerStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFreeBalance(value);
      break;
    case 2:
      var value = /** @type {!proto.rpc.JoinCelerStatus} */ (reader.readEnum());
      msg.setJoinStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.PeerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.PeerStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.PeerStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.PeerStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFreeBalance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJoinStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string free_balance = 1;
 * @return {string}
 */
proto.rpc.PeerStatus.prototype.getFreeBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.PeerStatus} returns this
 */
proto.rpc.PeerStatus.prototype.setFreeBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional JoinCelerStatus join_status = 2;
 * @return {!proto.rpc.JoinCelerStatus}
 */
proto.rpc.PeerStatus.prototype.getJoinStatus = function() {
  return /** @type {!proto.rpc.JoinCelerStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rpc.JoinCelerStatus} value
 * @return {!proto.rpc.PeerStatus} returns this
 */
proto.rpc.PeerStatus.prototype.setJoinStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.ChannelSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.ChannelSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.ChannelSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ChannelSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: msg.getChannelId_asB64(),
    mySeqNum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peerSeqNum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.ChannelSummary}
 */
proto.rpc.ChannelSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.ChannelSummary;
  return proto.rpc.ChannelSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.ChannelSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.ChannelSummary}
 */
proto.rpc.ChannelSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMySeqNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPeerSeqNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.ChannelSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.ChannelSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.ChannelSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.ChannelSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMySeqNum();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPeerSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes channel_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.ChannelSummary.prototype.getChannelId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_id = 1;
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {string}
 */
proto.rpc.ChannelSummary.prototype.getChannelId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelId()));
};


/**
 * optional bytes channel_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {!Uint8Array}
 */
proto.rpc.ChannelSummary.prototype.getChannelId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.ChannelSummary} returns this
 */
proto.rpc.ChannelSummary.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 my_seq_num = 2;
 * @return {number}
 */
proto.rpc.ChannelSummary.prototype.getMySeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.ChannelSummary} returns this
 */
proto.rpc.ChannelSummary.prototype.setMySeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 peer_seq_num = 3;
 * @return {number}
 */
proto.rpc.ChannelSummary.prototype.getPeerSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.ChannelSummary} returns this
 */
proto.rpc.ChannelSummary.prototype.setPeerSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.HelloRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.HelloRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.HelloRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.HelloRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.HelloRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    myAddr: msg.getMyAddr_asB64(),
    expectPeer: msg.getExpectPeer_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mySig: msg.getMySig_asB64(),
    openChannelsList: jspb.Message.toObjectList(msg.getOpenChannelsList(),
    proto.rpc.ChannelSummary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.HelloRequest}
 */
proto.rpc.HelloRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.HelloRequest;
  return proto.rpc.HelloRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.HelloRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.HelloRequest}
 */
proto.rpc.HelloRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMyAddr(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExpectPeer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMySig(value);
      break;
    case 5:
      var value = new proto.rpc.ChannelSummary;
      reader.readMessage(value,proto.rpc.ChannelSummary.deserializeBinaryFromReader);
      msg.addOpenChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.HelloRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.HelloRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.HelloRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.HelloRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getExpectPeer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMySig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOpenChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rpc.ChannelSummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes my_addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.HelloRequest.prototype.getMyAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes my_addr = 1;
 * This is a type-conversion wrapper around `getMyAddr()`
 * @return {string}
 */
proto.rpc.HelloRequest.prototype.getMyAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMyAddr()));
};


/**
 * optional bytes my_addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMyAddr()`
 * @return {!Uint8Array}
 */
proto.rpc.HelloRequest.prototype.getMyAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMyAddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.HelloRequest} returns this
 */
proto.rpc.HelloRequest.prototype.setMyAddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes expect_peer = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.HelloRequest.prototype.getExpectPeer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes expect_peer = 2;
 * This is a type-conversion wrapper around `getExpectPeer()`
 * @return {string}
 */
proto.rpc.HelloRequest.prototype.getExpectPeer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExpectPeer()));
};


/**
 * optional bytes expect_peer = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExpectPeer()`
 * @return {!Uint8Array}
 */
proto.rpc.HelloRequest.prototype.getExpectPeer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExpectPeer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.HelloRequest} returns this
 */
proto.rpc.HelloRequest.prototype.setExpectPeer = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.rpc.HelloRequest.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.HelloRequest} returns this
 */
proto.rpc.HelloRequest.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes my_sig = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.HelloRequest.prototype.getMySig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes my_sig = 4;
 * This is a type-conversion wrapper around `getMySig()`
 * @return {string}
 */
proto.rpc.HelloRequest.prototype.getMySig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMySig()));
};


/**
 * optional bytes my_sig = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMySig()`
 * @return {!Uint8Array}
 */
proto.rpc.HelloRequest.prototype.getMySig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMySig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.HelloRequest} returns this
 */
proto.rpc.HelloRequest.prototype.setMySig = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated ChannelSummary open_channels = 5;
 * @return {!Array<!proto.rpc.ChannelSummary>}
 */
proto.rpc.HelloRequest.prototype.getOpenChannelsList = function() {
  return /** @type{!Array<!proto.rpc.ChannelSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.ChannelSummary, 5));
};


/**
 * @param {!Array<!proto.rpc.ChannelSummary>} value
 * @return {!proto.rpc.HelloRequest} returns this
*/
proto.rpc.HelloRequest.prototype.setOpenChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.rpc.ChannelSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.ChannelSummary}
 */
proto.rpc.HelloRequest.prototype.addOpenChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rpc.ChannelSummary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.HelloRequest} returns this
 */
proto.rpc.HelloRequest.prototype.clearOpenChannelsList = function() {
  return this.setOpenChannelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.CelerChannelInHello.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.CelerChannelInHello.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.CelerChannelInHello.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.CelerChannelInHello} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CelerChannelInHello.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64(),
    cosignedStatesList: jspb.Message.toObjectList(msg.getCosignedStatesList(),
    proto.rpc.SignedSimplexState.toObject, includeInstance),
    openChannelResponse: (f = msg.getOpenChannelResponse()) && proto.rpc.OpenChannelResponse.toObject(includeInstance, f),
    channelState: jspb.Message.getFieldWithDefault(msg, 4, ""),
    payBytesList: msg.getPayBytesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.CelerChannelInHello}
 */
proto.rpc.CelerChannelInHello.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.CelerChannelInHello;
  return proto.rpc.CelerChannelInHello.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.CelerChannelInHello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.CelerChannelInHello}
 */
proto.rpc.CelerChannelInHello.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    case 2:
      var value = new proto.rpc.SignedSimplexState;
      reader.readMessage(value,proto.rpc.SignedSimplexState.deserializeBinaryFromReader);
      msg.addCosignedStates(value);
      break;
    case 3:
      var value = new proto.rpc.OpenChannelResponse;
      reader.readMessage(value,proto.rpc.OpenChannelResponse.deserializeBinaryFromReader);
      msg.setOpenChannelResponse(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelState(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPayBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.CelerChannelInHello.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.CelerChannelInHello.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.CelerChannelInHello} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.CelerChannelInHello.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCosignedStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rpc.SignedSimplexState.serializeBinaryToWriter
    );
  }
  f = message.getOpenChannelResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpc.OpenChannelResponse.serializeBinaryToWriter
    );
  }
  f = message.getChannelState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPayBytesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.CelerChannelInHello.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.rpc.CelerChannelInHello.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.rpc.CelerChannelInHello.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.CelerChannelInHello} returns this
 */
proto.rpc.CelerChannelInHello.prototype.setCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated SignedSimplexState cosigned_states = 2;
 * @return {!Array<!proto.rpc.SignedSimplexState>}
 */
proto.rpc.CelerChannelInHello.prototype.getCosignedStatesList = function() {
  return /** @type{!Array<!proto.rpc.SignedSimplexState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.SignedSimplexState, 2));
};


/**
 * @param {!Array<!proto.rpc.SignedSimplexState>} value
 * @return {!proto.rpc.CelerChannelInHello} returns this
*/
proto.rpc.CelerChannelInHello.prototype.setCosignedStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rpc.SignedSimplexState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.SignedSimplexState}
 */
proto.rpc.CelerChannelInHello.prototype.addCosignedStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rpc.SignedSimplexState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.CelerChannelInHello} returns this
 */
proto.rpc.CelerChannelInHello.prototype.clearCosignedStatesList = function() {
  return this.setCosignedStatesList([]);
};


/**
 * optional OpenChannelResponse open_channel_response = 3;
 * @return {?proto.rpc.OpenChannelResponse}
 */
proto.rpc.CelerChannelInHello.prototype.getOpenChannelResponse = function() {
  return /** @type{?proto.rpc.OpenChannelResponse} */ (
    jspb.Message.getWrapperField(this, proto.rpc.OpenChannelResponse, 3));
};


/**
 * @param {?proto.rpc.OpenChannelResponse|undefined} value
 * @return {!proto.rpc.CelerChannelInHello} returns this
*/
proto.rpc.CelerChannelInHello.prototype.setOpenChannelResponse = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.CelerChannelInHello} returns this
 */
proto.rpc.CelerChannelInHello.prototype.clearOpenChannelResponse = function() {
  return this.setOpenChannelResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.CelerChannelInHello.prototype.hasOpenChannelResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string channel_state = 4;
 * @return {string}
 */
proto.rpc.CelerChannelInHello.prototype.getChannelState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.CelerChannelInHello} returns this
 */
proto.rpc.CelerChannelInHello.prototype.setChannelState = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated bytes pay_bytes = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.rpc.CelerChannelInHello.prototype.getPayBytesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes pay_bytes = 5;
 * This is a type-conversion wrapper around `getPayBytesList()`
 * @return {!Array<string>}
 */
proto.rpc.CelerChannelInHello.prototype.getPayBytesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPayBytesList()));
};


/**
 * repeated bytes pay_bytes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayBytesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rpc.CelerChannelInHello.prototype.getPayBytesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPayBytesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.rpc.CelerChannelInHello} returns this
 */
proto.rpc.CelerChannelInHello.prototype.setPayBytesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.rpc.CelerChannelInHello} returns this
 */
proto.rpc.CelerChannelInHello.prototype.addPayBytes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.CelerChannelInHello} returns this
 */
proto.rpc.CelerChannelInHello.prototype.clearPayBytesList = function() {
  return this.setPayBytesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.HelloResponse.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.HelloResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.HelloResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.HelloResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.HelloResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cosignedStatesList: jspb.Message.toObjectList(msg.getCosignedStatesList(),
    proto.rpc.SignedSimplexState.toObject, includeInstance),
    payBytesList: msg.getPayBytesList_asB64(),
    channelInHelloList: jspb.Message.toObjectList(msg.getChannelInHelloList(),
    proto.rpc.CelerChannelInHello.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.HelloResponse}
 */
proto.rpc.HelloResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.HelloResponse;
  return proto.rpc.HelloResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.HelloResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.HelloResponse}
 */
proto.rpc.HelloResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = new proto.rpc.SignedSimplexState;
      reader.readMessage(value,proto.rpc.SignedSimplexState.deserializeBinaryFromReader);
      msg.addCosignedStates(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPayBytes(value);
      break;
    case 5:
      var value = new proto.rpc.CelerChannelInHello;
      reader.readMessage(value,proto.rpc.CelerChannelInHello.deserializeBinaryFromReader);
      msg.addChannelInHello(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.HelloResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.HelloResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.HelloResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.HelloResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCosignedStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rpc.SignedSimplexState.serializeBinaryToWriter
    );
  }
  f = message.getPayBytesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getChannelInHelloList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rpc.CelerChannelInHello.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.rpc.HelloResponse.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.HelloResponse} returns this
 */
proto.rpc.HelloResponse.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.rpc.HelloResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.HelloResponse} returns this
 */
proto.rpc.HelloResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SignedSimplexState cosigned_states = 3;
 * @return {!Array<!proto.rpc.SignedSimplexState>}
 */
proto.rpc.HelloResponse.prototype.getCosignedStatesList = function() {
  return /** @type{!Array<!proto.rpc.SignedSimplexState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.SignedSimplexState, 3));
};


/**
 * @param {!Array<!proto.rpc.SignedSimplexState>} value
 * @return {!proto.rpc.HelloResponse} returns this
*/
proto.rpc.HelloResponse.prototype.setCosignedStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rpc.SignedSimplexState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.SignedSimplexState}
 */
proto.rpc.HelloResponse.prototype.addCosignedStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rpc.SignedSimplexState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.HelloResponse} returns this
 */
proto.rpc.HelloResponse.prototype.clearCosignedStatesList = function() {
  return this.setCosignedStatesList([]);
};


/**
 * repeated bytes pay_bytes = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.rpc.HelloResponse.prototype.getPayBytesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes pay_bytes = 4;
 * This is a type-conversion wrapper around `getPayBytesList()`
 * @return {!Array<string>}
 */
proto.rpc.HelloResponse.prototype.getPayBytesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPayBytesList()));
};


/**
 * repeated bytes pay_bytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayBytesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rpc.HelloResponse.prototype.getPayBytesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPayBytesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.rpc.HelloResponse} returns this
 */
proto.rpc.HelloResponse.prototype.setPayBytesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.rpc.HelloResponse} returns this
 */
proto.rpc.HelloResponse.prototype.addPayBytes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.HelloResponse} returns this
 */
proto.rpc.HelloResponse.prototype.clearPayBytesList = function() {
  return this.setPayBytesList([]);
};


/**
 * repeated CelerChannelInHello channel_in_hello = 5;
 * @return {!Array<!proto.rpc.CelerChannelInHello>}
 */
proto.rpc.HelloResponse.prototype.getChannelInHelloList = function() {
  return /** @type{!Array<!proto.rpc.CelerChannelInHello>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.CelerChannelInHello, 5));
};


/**
 * @param {!Array<!proto.rpc.CelerChannelInHello>} value
 * @return {!proto.rpc.HelloResponse} returns this
*/
proto.rpc.HelloResponse.prototype.setChannelInHelloList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.rpc.CelerChannelInHello=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.CelerChannelInHello}
 */
proto.rpc.HelloResponse.prototype.addChannelInHello = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rpc.CelerChannelInHello, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.HelloResponse} returns this
 */
proto.rpc.HelloResponse.prototype.clearChannelInHelloList = function() {
  return this.setChannelInHelloList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.DelegationDescription.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.DelegationDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.DelegationDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.DelegationDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.DelegationDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegator: msg.getDelegator_asB64(),
    delegatee: msg.getDelegatee_asB64(),
    expiresAfterBlock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tokenToDelegateList: msg.getTokenToDelegateList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.DelegationDescription}
 */
proto.rpc.DelegationDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.DelegationDescription;
  return proto.rpc.DelegationDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.DelegationDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.DelegationDescription}
 */
proto.rpc.DelegationDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelegator(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelegatee(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiresAfterBlock(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTokenToDelegate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.DelegationDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.DelegationDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.DelegationDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.DelegationDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelegator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDelegatee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getExpiresAfterBlock();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTokenToDelegateList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes delegator = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.DelegationDescription.prototype.getDelegator = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes delegator = 1;
 * This is a type-conversion wrapper around `getDelegator()`
 * @return {string}
 */
proto.rpc.DelegationDescription.prototype.getDelegator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelegator()));
};


/**
 * optional bytes delegator = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelegator()`
 * @return {!Uint8Array}
 */
proto.rpc.DelegationDescription.prototype.getDelegator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelegator()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.DelegationDescription} returns this
 */
proto.rpc.DelegationDescription.prototype.setDelegator = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes delegatee = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.DelegationDescription.prototype.getDelegatee = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes delegatee = 2;
 * This is a type-conversion wrapper around `getDelegatee()`
 * @return {string}
 */
proto.rpc.DelegationDescription.prototype.getDelegatee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelegatee()));
};


/**
 * optional bytes delegatee = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelegatee()`
 * @return {!Uint8Array}
 */
proto.rpc.DelegationDescription.prototype.getDelegatee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelegatee()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.DelegationDescription} returns this
 */
proto.rpc.DelegationDescription.prototype.setDelegatee = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 expires_after_block = 3;
 * @return {number}
 */
proto.rpc.DelegationDescription.prototype.getExpiresAfterBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rpc.DelegationDescription} returns this
 */
proto.rpc.DelegationDescription.prototype.setExpiresAfterBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated bytes token_to_delegate = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.rpc.DelegationDescription.prototype.getTokenToDelegateList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes token_to_delegate = 4;
 * This is a type-conversion wrapper around `getTokenToDelegateList()`
 * @return {!Array<string>}
 */
proto.rpc.DelegationDescription.prototype.getTokenToDelegateList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTokenToDelegateList()));
};


/**
 * repeated bytes token_to_delegate = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTokenToDelegateList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rpc.DelegationDescription.prototype.getTokenToDelegateList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTokenToDelegateList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.rpc.DelegationDescription} returns this
 */
proto.rpc.DelegationDescription.prototype.setTokenToDelegateList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.rpc.DelegationDescription} returns this
 */
proto.rpc.DelegationDescription.prototype.addTokenToDelegate = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.DelegationDescription} returns this
 */
proto.rpc.DelegationDescription.prototype.clearTokenToDelegateList = function() {
  return this.setTokenToDelegateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.DelegationProof.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.DelegationProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.DelegationProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.DelegationProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegationDescriptionBytes: msg.getDelegationDescriptionBytes_asB64(),
    signature: msg.getSignature_asB64(),
    signer: msg.getSigner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.DelegationProof}
 */
proto.rpc.DelegationProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.DelegationProof;
  return proto.rpc.DelegationProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.DelegationProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.DelegationProof}
 */
proto.rpc.DelegationProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelegationDescriptionBytes(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.DelegationProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.DelegationProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.DelegationProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.DelegationProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelegationDescriptionBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes delegation_description_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.DelegationProof.prototype.getDelegationDescriptionBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes delegation_description_bytes = 1;
 * This is a type-conversion wrapper around `getDelegationDescriptionBytes()`
 * @return {string}
 */
proto.rpc.DelegationProof.prototype.getDelegationDescriptionBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelegationDescriptionBytes()));
};


/**
 * optional bytes delegation_description_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelegationDescriptionBytes()`
 * @return {!Uint8Array}
 */
proto.rpc.DelegationProof.prototype.getDelegationDescriptionBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelegationDescriptionBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.DelegationProof} returns this
 */
proto.rpc.DelegationProof.prototype.setDelegationDescriptionBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.DelegationProof.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.DelegationProof.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.DelegationProof.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.DelegationProof} returns this
 */
proto.rpc.DelegationProof.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes signer = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.DelegationProof.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signer = 3;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.rpc.DelegationProof.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.rpc.DelegationProof.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.DelegationProof} returns this
 */
proto.rpc.DelegationProof.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.DelegationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.DelegationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.DelegationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.DelegationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: (f = msg.getProof()) && proto.rpc.DelegationProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.DelegationRequest}
 */
proto.rpc.DelegationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.DelegationRequest;
  return proto.rpc.DelegationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.DelegationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.DelegationRequest}
 */
proto.rpc.DelegationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.DelegationProof;
      reader.readMessage(value,proto.rpc.DelegationProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.DelegationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.DelegationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.DelegationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.DelegationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.DelegationProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional DelegationProof proof = 1;
 * @return {?proto.rpc.DelegationProof}
 */
proto.rpc.DelegationRequest.prototype.getProof = function() {
  return /** @type{?proto.rpc.DelegationProof} */ (
    jspb.Message.getWrapperField(this, proto.rpc.DelegationProof, 1));
};


/**
 * @param {?proto.rpc.DelegationProof|undefined} value
 * @return {!proto.rpc.DelegationRequest} returns this
*/
proto.rpc.DelegationRequest.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.DelegationRequest} returns this
 */
proto.rpc.DelegationRequest.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.DelegationRequest.prototype.hasProof = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.DelegationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.DelegationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.DelegationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.DelegationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.DelegationResponse}
 */
proto.rpc.DelegationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.DelegationResponse;
  return proto.rpc.DelegationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.DelegationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.DelegationResponse}
 */
proto.rpc.DelegationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.DelegationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.DelegationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.DelegationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.DelegationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.rpc.DelegationResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.DelegationResponse} returns this
 */
proto.rpc.DelegationResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.QueryDelegationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.QueryDelegationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.QueryDelegationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.QueryDelegationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegatee: msg.getDelegatee_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.QueryDelegationRequest}
 */
proto.rpc.QueryDelegationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.QueryDelegationRequest;
  return proto.rpc.QueryDelegationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.QueryDelegationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.QueryDelegationRequest}
 */
proto.rpc.QueryDelegationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelegatee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.QueryDelegationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.QueryDelegationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.QueryDelegationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.QueryDelegationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelegatee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes delegatee = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.QueryDelegationRequest.prototype.getDelegatee = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes delegatee = 1;
 * This is a type-conversion wrapper around `getDelegatee()`
 * @return {string}
 */
proto.rpc.QueryDelegationRequest.prototype.getDelegatee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelegatee()));
};


/**
 * optional bytes delegatee = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelegatee()`
 * @return {!Uint8Array}
 */
proto.rpc.QueryDelegationRequest.prototype.getDelegatee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelegatee()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rpc.QueryDelegationRequest} returns this
 */
proto.rpc.QueryDelegationRequest.prototype.setDelegatee = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.QueryDelegationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.QueryDelegationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.QueryDelegationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.QueryDelegationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: (f = msg.getProof()) && proto.rpc.DelegationProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.QueryDelegationResponse}
 */
proto.rpc.QueryDelegationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.QueryDelegationResponse;
  return proto.rpc.QueryDelegationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.QueryDelegationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.QueryDelegationResponse}
 */
proto.rpc.QueryDelegationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.DelegationProof;
      reader.readMessage(value,proto.rpc.DelegationProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.QueryDelegationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.QueryDelegationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.QueryDelegationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.QueryDelegationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.DelegationProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional DelegationProof proof = 1;
 * @return {?proto.rpc.DelegationProof}
 */
proto.rpc.QueryDelegationResponse.prototype.getProof = function() {
  return /** @type{?proto.rpc.DelegationProof} */ (
    jspb.Message.getWrapperField(this, proto.rpc.DelegationProof, 1));
};


/**
 * @param {?proto.rpc.DelegationProof|undefined} value
 * @return {!proto.rpc.QueryDelegationResponse} returns this
*/
proto.rpc.QueryDelegationResponse.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.QueryDelegationResponse} returns this
 */
proto.rpc.QueryDelegationResponse.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.QueryDelegationResponse.prototype.hasProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpc.StateProof.prototype.toObject = function(opt_includeInstance) {
    return proto.rpc.StateProof.toObject(opt_includeInstance, this);
  };
  
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpc.StateProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpc.StateProof.toObject = function(includeInstance, msg) {
    var f, obj = {
      appState: (f = msg.getAppState()) && app_pb.AppState.toObject(includeInstance, f),
      requesterSig: msg.getRequesterSig_asB64()
    };
  
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  }
  
  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpc.StateProof}
   */
  proto.rpc.StateProof.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.StateProof;
    return proto.rpc.StateProof.deserializeBinaryFromReader(msg, reader);
  };
  
  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.rpc.StateProof} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.rpc.StateProof}
   */
  proto.rpc.StateProof.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
      case 1:
        var value = new app_pb.AppState;
        reader.readMessage(value,app_pb.AppState.deserializeBinaryFromReader);
        msg.setAppState(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRequesterSig(value);
        break;
      default:
        reader.skipField();
        break;
      }
    }
    return msg;
  };
  
  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.rpc.StateProof.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.rpc.StateProof.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };
  
  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.rpc.StateProof} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpc.StateProof.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getAppState();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        app_pb.AppState.serializeBinaryToWriter
      );
    }
    f = message.getRequesterSig_asU8();
    if (f.length > 0) {
      writer.writeBytes(
        2,
        f
      );
    }
  };
  
  /**
   * optional app.Appstate app_state = 1;
   * @return {?proto.app.AppState}
   */
  proto.rpc.StateProof.prototype.getAppState = function() {
    return /** @type{?proto.app.AppState} */(
      jspb.Message.getWrapperField(this, app_pb.AppState, 1)
    );
  };
  
  /**
   * @param {?proto.app.AppState|undefined} value
   * @return {!proto.rpc.AppState} returns this
   */
  proto.rpc.StateProof.prototype.setAppState = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };
  
  /**
   * Clears the message field making it undefined.
   * @return {!proto.rpc.StateProof} returns this
   */
  proto.rpc.StateProof.prototype.clearAppState = function() {
    return this.setAppState(undefined);
  };
  
  /**
   * Returns whether this field is set.
   * @return {boolean}
   */
  proto.rpc.StateProof.prototype.hasAppState = function() {
    return jspb.Message.getField(this, 1) != null;
  };
  
  /**
   * optional bytes requester_sig = 2;
   * @return {!(string|Uint8Array)}
   */
  proto.rpc.StateProof.prototype.getRequesterSig = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
  };
  
  /**
   * optional bytes requester_sig = 2;
   * This is a type-conversion wrapper around `getRequesterSig()`
   * @return {string}
   */
  proto.rpc.StateProof.prototype.getRequesterSig_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequesterSig()
    ));
  };
  
  /**
   * optional bytes requester_sig = 2;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getRequesterSig()`
   * @return {!Uint8Array}
   */
  proto.rpc.StateProof.prototype.getRequesterSig_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequesterSig()
    ));
  };
  
  /**
   * @param {!(string|Uint8Array)} value
   * @return {!proto.rpc.StateProof} returns this
   */
  proto.rpc.StateProof.prototype.setRequesterSig = function(value) {
    return jspb.Message.setProto3BytesField(this, 2, value);
  };
  
  
  if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rpc.StateProofResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.rpc.StateProofResponse.toObject(opt_includeInstance, this);
  };
  
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rpc.StateProofResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpc.StateProofResponse.toObject = function(includeInstance, msg) {
    var f, obj = {
      appState: (f = msg.getAppState()) && app_pb.AppState.toObject(includeInstance, f),
      requesterSig: msg.getRequesterSig_asB64(),
      approverSig: msg.getApproverSig_asB64()
    };
  
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  }
  
  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.rpc.StateProofResponse}
   */
  proto.rpc.StateProofResponse.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.rpc.StateProofResponse;
    return proto.rpc.StateProofResponse.deserializeBinaryFromReader(msg, reader);
  };
  
  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.rpc.StateProofResponse} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.rpc.StateProofResponse}
   */
  proto.rpc.StateProofResponse.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new app_pb.AppState;
          reader.readMessage(value, app_pb.AppState.deserializeBinaryFromReader);
          msg.setAppState(value);
          break;
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes());
          msg.setRequesterSig(value);
          break;
        case 3:
          var value = /** @type {!Uint8Array} */ (reader.readBytes());
          msg.setApproverSig(value);
          break;
        default:
          reader.skipField();
          break;
        }
    }
    return msg;
  };
  
  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.rpc.StateProofResponse.prototype.serializeBinary = function() {
    var wire = new jspb.BinaryWriter();
    proto.rpc.StateProofResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };
  
  /**
   * Serializes the given message to binary data (in protobuf wire 
   * format), writing to the given BinaryWriter.
   * @param {!proto.rpc.StateProofResponse} message
   * @param {!jspb.BinaryWriter} writer
   * @supperess {unusedLocalVariables} f is only used for nested messages
   */
  proto.rpc.StateProofResponse.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getAppState();
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        app_pb.AppState.serializeBinaryToWriter
      );
    }
    f = message.getRequesterSig_asU8();
    if (f.length > 0) {
      writer.writeBytes(
        2, 
        f
      );
    }
    f = message.getApproverSig_asU8();
    if (f.length > 0) {
      writer.writeBytes(
        3,
        f
      );
    }
  };
  
  /**
   * optional app.AppState app_state = 1;
   * @return {?proto.app.AppState}
   */
  proto.rpc.StateProofResponse.prototype.getAppState = function() {
    return /** @type{?proto.app.AppState} */ (
      jspb.Message.getWrapperField(this, app_pb.AppState, 1)
    );
  };
  
  /**
   * @param {?proto.app.AppState|undefined} value
   * @return {!proto.rpc.StateProofResponse} returns this
   */
  proto.rpc.StateProofResponse.prototype.setAppState = function(value) {
    return jspb.Message.setWrapperField(this, 1, value);
  };
  
  /**
   * Clears the message field making it undefined.
   * @return {!proto.rpc.StateProofResponse} returns this
   */
  proto.rpc.StateProofResponse.prototype.clearAppState = function() {
    return this.setAppState(undefined);
  };
  
  /**
   * Returns whether this field is set.
   * @return {boolean}
   */
  proto.rpc.StateProofResponse.prototype.hasAppState = function() {
    return jspb.Message.getField(this, 1) != null;
  };
  
  /**
   * optional bytes requester_sig = 2;
   * @return {!(string|Uint8Array)}
   */
  proto.rpc.StateProofResponse.prototype.getRequesterSig = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
  };
  
  /**
   * optional bytes requester_sig = 2;
   * This is a type-conversion wrapper around `getRequesterSig()`
   * @return {string}
   */
  proto.rpc.StateProofResponse.prototype.getRequesterSig_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequesterSig()
    ));
  };
  
  /**
   * optional bytes requester_sig = 2;
   *  Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getRequesterSig()`
   * @return {!Uint8Array}
   */
  proto.rpc.StateProofResponse.prototype.getRequesterSig_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequesterSig()
    ));
  };
  
  /**
   * @param {!(string|Uint8Array)} value
   * @return {!proto.rpc.StateProofResponse} returns this
   */
  proto.rpc.StateProofResponse.prototype.setRequesterSig = function(value) {
    return jspb.Message.setProto3BytesField(this, 2, value);
  };
  
  /**
   * optional bytes approver_sig = 3;
   * @return {!(string|Uint8Array)}
   */
  proto.rpc.StateProofResponse.prototype.getApproverSig = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
  };
  
  /**
   * optional bytes approver_sig = 3;
   * This is a type-conversion wrapper around `getApproverSig()`
   * @return {string}
   */
  proto.rpc.StateProofResponse.prototype.getApproverSig_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getApproverSig()));
  };
  
  
  /**
   * optional bytes approver_sig = 3;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getApproverSig()`
   * @return {!Uint8Array}
   */
  proto.rpc.StateProofResponse.prototype.getApproverSig_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getApproverSig()));
  };
  
  
  /**
   * @param {!(string|Uint8Array)} value
   * @return {!proto.rpc.CooperativeWithdrawResponse} returns this
   */
  proto.rpc.StateProofResponse.prototype.setApproverSig = function(value) {
    return jspb.Message.setProto3BytesField(this, 3, value);
  };
  


/**
 * @enum {number}
 */
proto.rpc.ErrCode = {
  OK: 0,
  UNAUTHORIZED: 1,
  INVALID_SIG: 2,
  INCORRECT_CLOCK: 3,
  WRONG_PEER: 4,
  INVALID_SEQ_NUM: 5,
  PAY_ROUTE_LOOP: 6,
  NO_ROUTE_TO_DST: 7
};

/**
 * @enum {number}
 */
proto.rpc.PaymentSettleReason = {
  PAY_VOUCHED: 0,
  PAY_EXPIRED: 1,
  PAY_REJECTED: 2,
  PAY_RESOLVED_ONCHAIN: 3,
  PAY_PAID_MAX: 4,
  PAY_DEST_UNREACHABLE: 5
};

/**
 * @enum {number}
 */
proto.rpc.OpenChannelBy = {
  UNDEFINED_OPEN_BY: 0,
  OPEN_CHANNEL_PROPOSER: 1,
  OPEN_CHANNEL_APPROVER: 2
};

/**
 * @enum {number}
 */
proto.rpc.OpenChannelStatus = {
  UNDEFINED_OPEN_CHANNEL_STATUS: 0,
  OPEN_CHANNEL_APPROVED: 1,
  OPEN_CHANNEL_TX_SUBMITTED: 2,
  OPEN_CHANNEL_TCB_OPENED: 3
};

/**
 * @enum {number}
 */
proto.rpc.JoinCelerStatus = {
  NOT_JOIN: 0,
  LOCAL: 1,
  REMOTE: 2
};

goog.object.extend(exports, proto.rpc);
