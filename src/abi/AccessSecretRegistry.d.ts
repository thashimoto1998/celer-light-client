/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface AccessSecretRegistryInterface extends Interface {
    functions :{
        getOutcome: TypedFunctionDescription<{ 
            encode([_query] : [Arrayish]): string;
        }>;

        getDID: TypedFunctionDescription<{
            encode([_key]: [BigNumberish]): string;
        }>;

        getKeyDID: TypedFunctionDescription<{
            encode([_key]: [Arrayish]): string;
        }>;

        checkPermissions: TypedFunctionDescription<{
            encode([user, documentKeyId]: [string, Arrayish]): string;
        }>;

        getOwner: TypedFunctionDescription<{
            encode([]:[]): string;
        }>;

        getGrantee: TypedFunctionDescription<{
            encode([]: []): string;
        }>;
    }

    events: {
        settedDID: TypedEventDescription<{
            encodeTopics([did]: [Arrayish])
        }>;
    }
}

export class AccessSecretRegistry extends Contract {
    connect(signerOrProvider: Signer | Provider | string): AccessSecretRegistry;
    attach(addressOrName: string): AccessSecretRegistry;
    deployed(): Promise<AccessSecretRegistry>;
    
    on(event: EventFilter | string, listener: Listener): AccessSecretRegistry;
    once(event: EventFilter | string, listener: Listener): AccessSecretRegistry;
    addListener(eventName: EventFilter | string, listener: Listener): AccessSecretRegistry;
    removeAllListeners(eventName: EventFilter | string): AccessSecretRegistry;
    removeListener(eventName: any, listener: Listener): AccessSecretRegistry;

    functions: {
        getOutcome(_query: Arrayish): Promise<boolean>;
        setDID(_did: Arrayish, _didRegistryAddress: string): Promise<boolean>;
        getDID(_key: BigNumber): Promise<Arrayish>;
        getKeyDID(_did: Arrayish): Promise<BigNumber>;
        checkPermissions(_grantee: string, _documentId: Arrayish): Promise<boolean>;
        getOwner(): Promise<string>;
        getGrantee(): Promise<string>;
    };

    events: {
        settedDID: TypedEventDescription<{
            encodeTopics([did]: [Arrayish]): string[];
        }>;
    };

    estimate: {
        getOutcome(_query: Arrayish): Promise<BigNumber>;
        setDID(_did: Arrayish, _didRegistryAddress: string): Promise<BigNumber>;
        getDID(_key:BigNumber): Promise<BigNumber>;
        getKeyDID(_did: Arrayish): Promise<BigNumber>;
        checkPermissions(_grantee: string, _documentId: Arrayish): Promise<boolean>;
        getOwner(): Promise<BigNumber>;
        getGrantee(): Promise<BigNumber>;
    };
}